-- VHDL Entity ece411.WriteComb.interface
--
-- Created:
--          by - hwoods2.stdt (gllnx26.ews.illinois.edu)
--          at - 05:11:13 10/08/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY WriteComb IS
   PORT( 
      DATAOUT       : IN     LC3b_word;
      MWRITEH_L     : IN     std_logic;
      MWRITEL_L     : IN     std_logic;
      WdataMuxout   : IN     LC3b_oword;
      rip3Offsetout : IN     LC3B_INDEX;
      aWriteCombout : OUT    LC3b_oword
   );

-- Declarations

END WriteComb ;

--
-- VHDL Architecture ece411.WriteComb.struct
--
-- Created:
--          by - hwoods2.stdt (gllnx26.ews.illinois.edu)
--          at - 05:11:13 10/08/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;

ARCHITECTURE struct OF WriteComb IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL Decode0       : std_logic;
   SIGNAL Decode1       : std_logic;
   SIGNAL Decode2       : std_logic;
   SIGNAL Decode3       : std_logic;
   SIGNAL Decode4       : std_logic;
   SIGNAL Decode5       : std_logic;
   SIGNAL Decode6       : std_logic;
   SIGNAL Decode7       : std_logic;
   SIGNAL DecodedOffset : LC3b_byte;
   SIGNAL newWord0      : LC3b_word;
   SIGNAL newWord1      : LC3b_word;
   SIGNAL newWord2      : LC3b_word;
   SIGNAL newWord3      : LC3b_word;
   SIGNAL newWord4      : LC3b_word;
   SIGNAL newWord5      : LC3b_word;
   SIGNAL newWord6      : LC3b_word;
   SIGNAL newWord7      : LC3b_word;
   SIGNAL word0         : LC3b_word;
   SIGNAL word1         : LC3b_word;
   SIGNAL word2         : LC3b_word;
   SIGNAL word3         : LC3b_word;
   SIGNAL word4         : LC3b_word;
   SIGNAL word5         : LC3b_word;
   SIGNAL word6         : LC3b_word;
   SIGNAL word7         : LC3b_word;


   -- Component Declarations
   COMPONENT CacheWriter
   PORT (
      MWH      : IN     std_logic ;
      MWL      : IN     std_logic ;
      Sel      : IN     std_logic ;
      lineData : IN     LC3b_word ;
      newData  : IN     LC3b_word ;
      newword  : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Decoder8
   PORT (
      A : IN     LC3B_INDEX ;
      F : OUT    LC3b_byte 
   );
   END COMPONENT;
   COMPONENT decode8split
   PORT (
      DecodedOffset : IN     LC3b_byte ;
      Decode2       : OUT    std_logic ;
      Decode3       : OUT    std_logic ;
      Decode4       : OUT    std_logic ;
      Decode5       : OUT    std_logic ;
      Decode6       : OUT    std_logic ;
      Decode7       : OUT    std_logic ;
      Decode0       : OUT    std_logic ;
      Decode1       : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT linejoiner
   PORT (
      newWord0      : IN     LC3b_word ;
      newWord1      : IN     LC3b_word ;
      newWord2      : IN     LC3b_word ;
      newWord3      : IN     LC3b_word ;
      newWord4      : IN     LC3b_word ;
      newWord5      : IN     LC3b_word ;
      newWord6      : IN     LC3b_word ;
      newWord7      : IN     LC3b_word ;
      aWriteCombout : OUT    LC3b_oword 
   );
   END COMPONENT;
   COMPONENT linesplitter
   PORT (
      word0       : OUT    LC3b_word ;
      word1       : OUT    LC3b_word ;
      word2       : OUT    LC3b_word ;
      word3       : OUT    LC3b_word ;
      word4       : OUT    LC3b_word ;
      word5       : OUT    LC3b_word ;
      word6       : OUT    LC3b_word ;
      word7       : OUT    LC3b_word ;
      WdataMuxout : IN     LC3b_oword 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : CacheWriter USE ENTITY ece411.CacheWriter;
   FOR ALL : Decoder8 USE ENTITY ece411.Decoder8;
   FOR ALL : decode8split USE ENTITY ece411.decode8split;
   FOR ALL : linejoiner USE ENTITY ece411.linejoiner;
   FOR ALL : linesplitter USE ENTITY ece411.linesplitter;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_1 : CacheWriter
      PORT MAP (
         MWH      => MWRITEH_L,
         MWL      => MWRITEL_L,
         Sel      => Decode0,
         lineData => word0,
         newData  => DATAOUT,
         newWord  => newWord0
      );
   U_2 : CacheWriter
      PORT MAP (
         MWH      => MWRITEH_L,
         MWL      => MWRITEL_L,
         Sel      => Decode1,
         lineData => word1,
         newData  => DATAOUT,
         newWord  => newWord1
      );
   U_3 : CacheWriter
      PORT MAP (
         MWH      => MWRITEH_L,
         MWL      => MWRITEL_L,
         Sel      => Decode2,
         lineData => word2,
         newData  => DATAOUT,
         newWord  => newWord2
      );
   U_4 : CacheWriter
      PORT MAP (
         MWH      => MWRITEH_L,
         MWL      => MWRITEL_L,
         Sel      => Decode3,
         lineData => word3,
         newData  => DATAOUT,
         newWord  => newWord3
      );
   U_5 : CacheWriter
      PORT MAP (
         MWH      => MWRITEH_L,
         MWL      => MWRITEL_L,
         Sel      => Decode4,
         lineData => word4,
         newData  => DATAOUT,
         newWord  => newWord4
      );
   U_6 : CacheWriter
      PORT MAP (
         MWH      => MWRITEH_L,
         MWL      => MWRITEL_L,
         Sel      => Decode5,
         lineData => word5,
         newData  => DATAOUT,
         newWord  => newWord5
      );
   U_7 : CacheWriter
      PORT MAP (
         MWH      => MWRITEH_L,
         MWL      => MWRITEL_L,
         Sel      => Decode6,
         lineData => word6,
         newData  => DATAOUT,
         newWord  => newWord6
      );
   U_8 : CacheWriter
      PORT MAP (
         MWH      => MWRITEH_L,
         MWL      => MWRITEL_L,
         Sel      => Decode7,
         lineData => word7,
         newData  => DATAOUT,
         newWord  => newWord7
      );
   U_0 : Decoder8
      PORT MAP (
         A => rip3Offsetout,
         F => DecodedOffset
      );
   adecode8split : decode8split
      PORT MAP (
         DecodedOffset => DecodedOffset,
         Decode2       => Decode2,
         Decode3       => Decode3,
         Decode4       => Decode4,
         Decode5       => Decode5,
         Decode6       => Decode6,
         Decode7       => Decode7,
         Decode0       => Decode0,
         Decode1       => Decode1
      );
   alinejoiner : linejoiner
      PORT MAP (
         newWord0      => newWord0,
         newWord1      => newWord1,
         newWord2      => newWord2,
         newWord3      => newWord3,
         newWord4      => newWord4,
         newWord5      => newWord5,
         newWord6      => newWord6,
         newWord7      => newWord7,
         aWriteCombout => aWriteCombout
      );
   alinesplitter : linesplitter
      PORT MAP (
         word0       => word0,
         word1       => word1,
         word2       => word2,
         word3       => word3,
         word4       => word4,
         word5       => word5,
         word6       => word6,
         word7       => word7,
         WdataMuxout => WdataMuxout
      );

END struct;
