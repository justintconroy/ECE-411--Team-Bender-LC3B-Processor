-- VHDL Entity ece411.Datapath.interface
--
-- Created:
--          by - hwoods2.stdt (eelnx36.ews.illinois.edu)
--          at - 13:05:01 09/23/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Datapath IS
   PORT( 
      ADJ45MuxSel      : IN     std_logic;
      ADJ56MuxSel      : IN     std_logic;
      ADJ8ByteMuxSel   : IN     std_logic;
      ALUMuxSel        : IN     std_logic;
      ALUop            : IN     LC3b_aluop;
      BRaddPCMuxSel    : IN     std_logic;
      BraddRFAMuxSel   : IN     std_logic;
      ClrLHMuxSel      : IN     std_logic;
      DATAIN           : IN     LC3b_word;
      JSRMDRMuxSel     : IN     std_logic;
      JSRRFAMuxSel     : IN     std_logic;
      LoadIR           : IN     std_logic;
      LoadMAR          : IN     std_logic;
      LoadMDR          : IN     std_logic;
      LoadNZP          : IN     std_logic;
      LoadPC           : IN     std_logic;
      MARMuxSel        : IN     std_logic;
      MDRMuxSel        : IN     std_logic;
      MdrMarMuxSel     : IN     std_logic;
      PCMuxSel         : IN     std_logic;
      PCRegMuxSel      : IN     std_logic;
      RESET_L          : IN     std_logic;
      RFALowByteMuxSel : IN     std_logic;
      RFClrMuxSel      : IN     std_logic;
      RFMuxSel         : IN     std_logic;
      RegWrite         : IN     std_logic;
      StoreSR          : IN     std_logic;
      clk              : IN     std_logic;
      destR7Muxsel     : IN     std_logic;
      offset64MuxSel   : IN     std_logic;
      ADDRESS          : OUT    LC3b_word;
      CheckN           : OUT    std_logic;
      CheckP           : OUT    std_logic;
      CheckZ           : OUT    std_logic;
      DATAOUT          : OUT    LC3b_word;
      Opcode           : OUT    LC3b_opcode;
      RipBit11out      : OUT    std_logic;
      RipBit4out       : OUT    std_logic;
      RipBit5out       : OUT    std_logic;
      RipRFABit0out    : OUT    std_logic;
      n                : OUT    std_logic;
      p                : OUT    std_logic;
      z                : OUT    std_logic
   );

-- Declarations

END Datapath ;

--
-- VHDL Architecture ece411.Datapath.struct
--
-- Created:
--          by - hwoods2.stdt (eelnx36.ews.illinois.edu)
--          at - 13:05:02 09/23/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;

ARCHITECTURE struct OF Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADJ11out         : LC3b_word;
   SIGNAL ADJ45out         : LC3b_word;
   SIGNAL ADJ4out          : LC3b_word;
   SIGNAL ADJ56out         : LC3b_word;
   SIGNAL ADJ5out          : LC3b_word;
   SIGNAL ADJ6out          : LC3b_word;
   SIGNAL ADJ8ByteMuxout   : LC3b_word;
   SIGNAL ADJ8out          : LC3b_word;
   SIGNAL ADJ9out          : LC3b_word;
   SIGNAL ALUMuxout        : LC3b_word;
   SIGNAL ALUout           : LC3b_word;
   SIGNAL BraddPCMuxout    : LC3b_word;
   SIGNAL BraddRFAMuxout   : LC3b_word;
   SIGNAL Braddout         : LC3b_word;
   SIGNAL ClrByteHout      : LC3b_word;
   SIGNAL ClrByteLout      : LC3b_word;
   SIGNAL CpyLowByteout    : LC3b_word;
   SIGNAL F1               : LC3b_word;
   SIGNAL GenCCout         : LC3b_cc;
   SIGNAL JSRADJ8Muxout    : LC3b_word;
   SIGNAL JSRRFAMuxout     : LC3b_word;
   SIGNAL JSRaddout        : LC3b_word;
   SIGNAL MARMuxout        : LC3b_word;
   SIGNAL MDRMuxout        : LC3b_word;
   SIGNAL MDRout           : LC3b_word;
   SIGNAL MdrMarMuxout     : LC3b_word;
   SIGNAL PCMuxout         : LC3b_word;
   SIGNAL PCPlus2out       : LC3b_word;
   SIGNAL PCRegMuxout      : LC3b_word;
   SIGNAL PCout            : LC3b_word;
   SIGNAL RFALowByteMuxout : LC3b_word;
   SIGNAL RFAout           : LC3b_word;
   SIGNAL RFBout           : LC3b_word;
   SIGNAL RFClrMuxout      : LC3b_word;
   SIGNAL RFMuxout         : LC3b_word;
   SIGNAL SrcA             : LC3b_reg;
   SIGNAL SrcB             : LC3b_reg;
   SIGNAL StoreMuxout      : LC3b_reg;
   SIGNAL dest             : LC3b_reg;
   SIGNAL destin           : LC3b_reg;
   SIGNAL index6           : LC3b_index6;
   SIGNAL instruction      : LC3b_word;
   SIGNAL offset64out      : LC3b_word;
   SIGNAL offset6out       : LC3b_word;
   SIGNAL offset9          : LC3b_offset9;


   -- Component Declarations
   COMPONENT ADJ11
   PORT (
      clk         : IN     std_logic ;
      instruction : IN     LC3b_word ;
      ADJ11out    : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ4
   PORT (
      clk     : IN     std_logic ;
      index6  : IN     LC3b_index6 ;
      ADJ4out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ5
   PORT (
      clk     : IN     std_logic ;
      index6  : IN     LC3b_index6 ;
      ADJ5out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ56Mux
   PORT (
      ADJ45out    : IN     LC3b_word ;
      ADJ56MuxSel : IN     std_logic ;
      ADJ6out     : IN     LC3b_word ;
      clk         : IN     std_logic ;
      ADJ56out    : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ6
   PORT (
      clk     : IN     std_logic ;
      index6  : IN     LC3b_index6 ;
      ADJ6out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ8
   PORT (
      clk         : IN     std_logic ;
      instruction : IN     LC3b_word ;
      ADJ8out     : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ9
   PORT (
      clk     : IN     std_logic ;
      offset9 : IN     LC3b_offset9 ;
      ADJ9out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ALU
   PORT (
      ALUMuxout      : IN     LC3b_word ;
      ALUop          : IN     LC3b_aluop ;
      BraddRFAMuxout : IN     LC3b_word ;
      clk            : IN     std_logic ;
      ALUout         : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT BRadd
   PORT (
      ADJ9out  : IN     LC3b_word ;
      PCout    : IN     LC3b_word ;
      clk      : IN     std_logic ;
      Braddout : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ClrByteH
   PORT (
      RFMuxout    : IN     LC3b_word ;
      clk         : IN     std_logic ;
      ClrByteHout : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ClrByteL
   PORT (
      RFMuxout    : IN     LC3b_word ;
      clk         : IN     std_logic ;
      ClrByteLout : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT CpyLowByte
   PORT (
      RFAout        : IN     LC3b_word ;
      clk           : IN     std_logic ;
      CpyLowByteout : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT GenCC
   PORT (
      RFMuxout : IN     LC3b_word ;
      clk      : IN     std_logic ;
      GenCCout : OUT    LC3b_cc 
   );
   END COMPONENT;
   COMPONENT IR
   PORT (
      LoadIR      : IN     std_logic ;
      MDRout      : IN     LC3b_word ;
      clk         : IN     std_logic ;
      Opcode      : OUT    LC3b_opcode ;
      SrcA        : OUT    LC3b_reg ;
      SrcB        : OUT    LC3b_reg ;
      destin      : OUT    LC3b_reg ;
      index6      : OUT    LC3b_index6 ;
      instruction : OUT    LC3b_word ;
      offset9     : OUT    LC3b_offset9 
   );
   END COMPONENT;
   COMPONENT JSRadd
   PORT (
      ADJ11out  : IN     LC3b_word ;
      PCout     : IN     LC3b_word ;
      clk       : IN     std_logic ;
      JSRaddout : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT NZP
   PORT (
      GenCCout : IN     LC3b_cc ;
      LoadNZP  : IN     std_logic ;
      clk      : IN     std_logic ;
      n        : OUT    std_logic ;
      p        : OUT    std_logic ;
      z        : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT NZPsplit
   PORT (
      clk    : IN     std_logic ;
      destin : IN     LC3b_reg ;
      CheckN : OUT    std_logic ;
      CheckP : OUT    std_logic ;
      CheckZ : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Plus2
   PORT (
      PCout      : IN     LC3b_word ;
      clk        : IN     std_logic ;
      PCPlus2out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Reg16
   PORT (
      Input  : IN     LC3b_word ;
      RESET  : IN     std_logic ;
      clk    : IN     std_logic ;
      load   : IN     std_logic ;
      Output : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT RegFile
   PORT (
      RESET_L     : IN     std_logic ;
      RFClrMuxout : IN     LC3b_word ;
      RegWrite    : IN     std_logic ;
      SrcB        : IN     LC3b_reg ;
      StoreMuxout : IN     LC3b_reg ;
      clk         : IN     std_logic ;
      dest        : IN     LC3b_reg ;
      RFAout      : OUT    LC3b_word ;
      RFBout      : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT RipBit5
   PORT (
      clk        : IN     std_logic ;
      index6     : IN     LC3b_index6 ;
      RipBit4out : OUT    std_logic ;
      RipBit5out : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT RipRFABit0
   PORT (
      ALUout        : IN     LC3b_word ;
      clk           : IN     std_logic ;
      RipRFABit0out : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Ripbit11
   PORT (
      clk         : IN     std_logic ;
      instruction : IN     LC3b_word ;
      RipBit11out : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT StoreMux
   PORT (
      SrcA        : IN     LC3b_reg ;
      StoreSR     : IN     std_logic ;
      clk         : IN     std_logic ;
      destin      : IN     LC3b_reg ;
      StoreMuxout : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT destR7mux
   PORT (
      clk          : IN     std_logic ;
      destR7Muxsel : IN     std_logic ;
      destin       : IN     LC3b_reg ;
      dest         : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT offset6
   PORT (
      clk        : IN     std_logic ;
      index6     : IN     LC3b_index6 ;
      offset6out : OUT    LC3b_word 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADJ11 USE ENTITY ece411.ADJ11;
   FOR ALL : ADJ4 USE ENTITY ece411.ADJ4;
   FOR ALL : ADJ5 USE ENTITY ece411.ADJ5;
   FOR ALL : ADJ56Mux USE ENTITY ece411.ADJ56Mux;
   FOR ALL : ADJ6 USE ENTITY ece411.ADJ6;
   FOR ALL : ADJ8 USE ENTITY ece411.ADJ8;
   FOR ALL : ADJ9 USE ENTITY ece411.ADJ9;
   FOR ALL : ALU USE ENTITY ece411.ALU;
   FOR ALL : BRadd USE ENTITY ece411.BRadd;
   FOR ALL : ClrByteH USE ENTITY ece411.ClrByteH;
   FOR ALL : ClrByteL USE ENTITY ece411.ClrByteL;
   FOR ALL : CpyLowByte USE ENTITY ece411.CpyLowByte;
   FOR ALL : GenCC USE ENTITY ece411.GenCC;
   FOR ALL : IR USE ENTITY ece411.IR;
   FOR ALL : JSRadd USE ENTITY ece411.JSRadd;
   FOR ALL : NZP USE ENTITY ece411.NZP;
   FOR ALL : NZPsplit USE ENTITY ece411.NZPsplit;
   FOR ALL : Plus2 USE ENTITY ece411.Plus2;
   FOR ALL : Reg16 USE ENTITY ece411.Reg16;
   FOR ALL : RegFile USE ENTITY ece411.RegFile;
   FOR ALL : RipBit5 USE ENTITY ece411.RipBit5;
   FOR ALL : RipRFABit0 USE ENTITY ece411.RipRFABit0;
   FOR ALL : Ripbit11 USE ENTITY ece411.Ripbit11;
   FOR ALL : StoreMux USE ENTITY ece411.StoreMux;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : destR7mux USE ENTITY ece411.destR7mux;
   FOR ALL : offset6 USE ENTITY ece411.offset6;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   --  Dataout = MDRout
   DATAOUT <= MDRout;                                     


   -- Instance port mappings.
   aADJ11 : ADJ11
      PORT MAP (
         clk         => clk,
         instruction => instruction,
         ADJ11out    => ADJ11out
      );
   aADJ4 : ADJ4
      PORT MAP (
         clk     => clk,
         index6  => index6,
         ADJ4out => ADJ4out
      );
   aADJ5 : ADJ5
      PORT MAP (
         clk     => clk,
         index6  => index6,
         ADJ5out => ADJ5out
      );
   aADJ56Mux : ADJ56Mux
      PORT MAP (
         ADJ45out    => ADJ45out,
         ADJ56MuxSel => ADJ56MuxSel,
         ADJ6out     => ADJ6out,
         clk         => clk,
         ADJ56out    => ADJ56out
      );
   aADJ6 : ADJ6
      PORT MAP (
         clk     => clk,
         index6  => index6,
         ADJ6out => ADJ6out
      );
   aADJ8 : ADJ8
      PORT MAP (
         clk         => clk,
         instruction => instruction,
         ADJ8out     => ADJ8out
      );
   aADJ9 : ADJ9
      PORT MAP (
         clk     => clk,
         offset9 => offset9,
         ADJ9out => ADJ9out
      );
   aALU : ALU
      PORT MAP (
         ALUMuxout      => ALUMuxout,
         ALUop          => ALUop,
         BraddRFAMuxout => BraddRFAMuxout,
         clk            => clk,
         ALUout         => ALUout
      );
   aBRadd : BRadd
      PORT MAP (
         ADJ9out  => ADJ9out,
         PCout    => PCout,
         clk      => clk,
         Braddout => Braddout
      );
   aClrByteH : ClrByteH
      PORT MAP (
         RFMuxout    => RFMuxout,
         clk         => clk,
         ClrByteHout => ClrByteHout
      );
   aClrLByte : ClrByteL
      PORT MAP (
         RFMuxout    => RFMuxout,
         clk         => clk,
         ClrByteLout => ClrByteLout
      );
   aCpyLowByte : CpyLowByte
      PORT MAP (
         RFAout        => RFAout,
         clk           => clk,
         CpyLowByteout => CpyLowByteout
      );
   aGenCC : GenCC
      PORT MAP (
         RFMuxout => RFMuxout,
         clk      => clk,
         GenCCout => GenCCout
      );
   aIR : IR
      PORT MAP (
         LoadIR      => LoadIR,
         MDRout      => MDRout,
         clk         => clk,
         Opcode      => Opcode,
         SrcA        => SrcA,
         SrcB        => SrcB,
         destin      => destin,
         index6      => index6,
         instruction => instruction,
         offset9     => offset9
      );
   aJSRadd : JSRadd
      PORT MAP (
         ADJ11out  => ADJ11out,
         PCout     => PCout,
         clk       => clk,
         JSRaddout => JSRaddout
      );
   aNZP : NZP
      PORT MAP (
         GenCCout => GenCCout,
         LoadNZP  => LoadNZP,
         clk      => clk,
         n        => n,
         p        => p,
         z        => z
      );
   aNZPsplit : NZPsplit
      PORT MAP (
         clk    => clk,
         destin => destin,
         CheckN => CheckN,
         CheckP => CheckP,
         CheckZ => CheckZ
      );
   aPlus2 : Plus2
      PORT MAP (
         PCout      => PCout,
         clk        => clk,
         PCPlus2out => PCPlus2out
      );
   MAR : Reg16
      PORT MAP (
         Input  => MARMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadMAR,
         Output => ADDRESS
      );
   MDR : Reg16
      PORT MAP (
         Input  => MDRMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadMDR,
         Output => MDRout
      );
   PC : Reg16
      PORT MAP (
         Input  => PCRegMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadPC,
         Output => PCout
      );
   aRegFile : RegFile
      PORT MAP (
         RESET_L     => RESET_L,
         RFClrMuxout => RFClrMuxout,
         RegWrite    => RegWrite,
         SrcB        => SrcB,
         StoreMuxout => StoreMuxout,
         clk         => clk,
         dest        => dest,
         RFAout      => RFAout,
         RFBout      => RFBout
      );
   aRipBit5 : RipBit5
      PORT MAP (
         clk        => clk,
         index6     => index6,
         RipBit4out => RipBit4out,
         RipBit5out => RipBit5out
      );
   aRipRFAbit0 : RipRFABit0
      PORT MAP (
         ALUout        => ALUout,
         clk           => clk,
         RipRFABit0out => RipRFABit0out
      );
   aRipBit11 : Ripbit11
      PORT MAP (
         clk         => clk,
         instruction => instruction,
         RipBit11out => RipBit11out
      );
   aStoreMux : StoreMux
      PORT MAP (
         SrcA        => SrcA,
         StoreSR     => StoreSR,
         clk         => clk,
         destin      => destin,
         StoreMuxout => StoreMuxout
      );
   ADJ45 : WordMux2
      PORT MAP (
         A   => ADJ5out,
         B   => offset64out,
         Sel => ADJ45MuxSel,
         F   => ADJ45out
      );
   ADj8ByteMux : WordMux2
      PORT MAP (
         A   => RFALowByteMuxout,
         B   => ADJ8out,
         Sel => ADJ8ByteMuxSel,
         F   => ADJ8ByteMuxout
      );
   ALUMux : WordMux2
      PORT MAP (
         A   => RFBout,
         B   => ADJ56out,
         Sel => ALUMuxSel,
         F   => ALUMuxout
      );
   BRaddRFAMux : WordMux2
      PORT MAP (
         A   => ADJ8ByteMuxout,
         B   => BraddPCMuxout,
         Sel => BraddRFAMuxSel,
         F   => BraddRFAMuxout
      );
   BraddPCmux : WordMux2
      PORT MAP (
         A   => Braddout,
         B   => PCout,
         Sel => BRaddPCMuxSel,
         F   => BraddPCMuxout
      );
   ClrLHMux : WordMux2
      PORT MAP (
         A   => ClrByteHout,
         B   => ClrByteLout,
         Sel => ClrLHMuxSel,
         F   => F1
      );
   JSRMDRMux : WordMux2
      PORT MAP (
         A   => JSRaddout,
         B   => MDRout,
         Sel => JSRMDRMuxSel,
         F   => JSRADJ8Muxout
      );
   JSRRFAmux : WordMux2
      PORT MAP (
         A   => RFAout,
         B   => JSRADJ8Muxout,
         Sel => JSRRFAMuxSel,
         F   => JSRRFAMuxout
      );
   MARMux : WordMux2
      PORT MAP (
         A   => PCout,
         B   => MdrMarMuxout,
         Sel => MARMuxSel,
         F   => MARMuxout
      );
   MDRMux : WordMux2
      PORT MAP (
         A   => DATAIN,
         B   => ALUout,
         Sel => MDRMuxSel,
         F   => MDRMuxout
      );
   MdrMarMux : WordMux2
      PORT MAP (
         A   => ALUout,
         B   => MDRout,
         Sel => MdrMarMuxSel,
         F   => MdrMarMuxout
      );
   PCMux : WordMux2
      PORT MAP (
         A   => PCPlus2out,
         B   => Braddout,
         Sel => PCMuxSel,
         F   => PCMuxout
      );
   PCRegMux : WordMux2
      PORT MAP (
         A   => PCMuxout,
         B   => JSRRFAMuxout,
         Sel => PCRegMuxSel,
         F   => PCRegMuxout
      );
   RFALowByteMux : WordMux2
      PORT MAP (
         A   => RFAout,
         B   => CpyLowByteout,
         Sel => RFALowByteMuxSel,
         F   => RFALowByteMuxout
      );
   RFClrMux : WordMux2
      PORT MAP (
         A   => RFMuxout,
         B   => F1,
         Sel => RFClrMuxSel,
         F   => RFClrMuxout
      );
   RFMux : WordMux2
      PORT MAP (
         A   => MDRout,
         B   => ALUout,
         Sel => RFMuxSel,
         F   => RFMuxout
      );
   offset64Mux : WordMux2
      PORT MAP (
         A   => ADJ4out,
         B   => offset6out,
         Sel => offset64MuxSel,
         F   => offset64out
      );
   adestR7mux : destR7mux
      PORT MAP (
         clk          => clk,
         destR7Muxsel => destR7Muxsel,
         destin       => destin,
         dest         => dest
      );
   aoffset6 : offset6
      PORT MAP (
         clk        => clk,
         index6     => index6,
         offset6out => offset6out
      );

END struct;
