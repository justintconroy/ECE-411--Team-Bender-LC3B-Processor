-- VHDL Entity ece411.Datapath.interface
--
-- Created:
--          by - jconroy2.stdt (eelnx39.ews.illinois.edu)
--          at - 20:57:48 10/18/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Datapath IS
   PORT( 
      ALUMuxSel      : IN     std_logic;
      ALUop          : IN     LC3b_aluop;
      DATAIN         : IN     LC3b_word;
      DataMuxSel     : IN     lc3b_4mux_sel;
      DataOutMuxSel  : IN     lc3b_4mux_sel;
      ImmMuxSel      : IN     lc3b_4mux_sel;
      LEAMuxSel      : IN     std_logic;
      LoadIR         : IN     std_logic;
      LoadMAR        : IN     std_logic;
      LoadMDR        : IN     std_logic;
      LoadNZP        : IN     std_logic;
      LoadPC         : IN     std_logic;
      MARMuxSel      : IN     std_logic;
      MDRMuxSel      : IN     std_logic;
      MDRPCMuxSel    : IN     std_logic;
      MDRtoMARMuxSel : IN     std_logic;
      PCMuxSel       : IN     std_logic;
      PCOffMuxSel    : IN     std_logic;
      PCRegMuxSel    : IN     std_logic;
      RESET_L        : IN     std_logic;
      RFMuxSel       : IN     std_logic;
      RegPCMuxSel    : IN     std_logic;
      RegWrite       : IN     std_logic;
      StoreSR        : IN     std_logic;
      TRAPMuxSel     : IN     std_logic;
      clk            : IN     std_logic;
      destMuxSel     : IN     std_logic;
      ADDR0out       : OUT    std_logic;
      ADDRESS        : OUT    LC3b_word;
      CheckN         : OUT    std_logic;
      CheckP         : OUT    std_logic;
      CheckZ         : OUT    std_logic;
      DATAOUT        : OUT    LC3b_word;
      IR11           : OUT    std_logic;
      IR4            : OUT    std_logic;
      IR5            : OUT    std_logic;
      Opcode         : OUT    LC3b_opcode;
      n              : OUT    std_logic;
      p              : OUT    std_logic;
      z              : OUT    std_logic
   );

-- Declarations

END Datapath ;

--
-- VHDL Architecture ece411.Datapath.struct
--
-- Created:
--          by - jconroy2.stdt (eelnx39.ews.illinois.edu)
--          at - 20:57:48 10/18/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
USE ieee.std_logic_arith.all;

LIBRARY ece411;

ARCHITECTURE struct OF Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADJ11out       : LC3b_word;
   SIGNAL ADJ4out        : lc3b_word;
   SIGNAL ADJ5out        : LC3b_word;
   SIGNAL ADJ6nsout      : std_logic_vector(15 DOWNTO 0);
   SIGNAL ADJ6out        : LC3b_word;
   SIGNAL ADJ8out        : lc3b_word;
   SIGNAL ADJ9out        : LC3b_word;
   SIGNAL ALUMuxout      : LC3b_word;
   SIGNAL ALUout         : LC3b_word;
   SIGNAL ALUtoHout      : lc3b_word;
   SIGNAL ALUtoLout      : lc3b_word;
   SIGNAL BRaddout       : LC3b_word;
   SIGNAL DataMuxout     : lc3b_word;
   SIGNAL DataOutMuxout  : lc3b_word;
   SIGNAL GenCCout       : LC3b_cc;
   SIGNAL ImmMuxOut      : LC3b_word;
   SIGNAL LEAMuxout      : LC3b_word;
   SIGNAL MARMuxout      : LC3b_word;
   SIGNAL MDRHout        : lc3b_word;
   SIGNAL MDRLout        : lc3b_word;
   SIGNAL MDRMuxout      : LC3b_word;
   SIGNAL MDRPCMuxout    : LC3b_word;
   SIGNAL MDRout         : lc3b_word;
   SIGNAL MDRtoMARMuxout : LC3b_word;
   SIGNAL PCMuxout       : LC3b_word;
   SIGNAL PCOffMuxOut    : LC3b_word;
   SIGNAL PCPlus2out     : LC3b_word;
   SIGNAL PCRegMuxout    : LC3b_word;
   SIGNAL PCout          : LC3b_word;
   SIGNAL RFAout         : LC3b_word;
   SIGNAL RFBout         : LC3b_word;
   SIGNAL RFMuxout       : LC3b_word;
   SIGNAL RegPCMuxOut    : LC3b_word;
   SIGNAL SrcA           : LC3b_reg;
   SIGNAL SrcB           : LC3b_reg;
   SIGNAL StoreMuxout    : LC3b_reg;
   SIGNAL TRAPMuxout     : LC3b_word;
   SIGNAL TrapVect8      : LC3b_TrapVect8;
   SIGNAL dest           : LC3b_reg;
   SIGNAL imm4           : LC3b_IMM4;
   SIGNAL imm5           : LC3b_IMM5;
   SIGNAL index6         : LC3b_index6;
   SIGNAL offset11       : LC3b_offset11;
   SIGNAL offset9        : LC3b_offset9;
   SIGNAL pre_dest       : LC3b_reg;
   SIGNAL reg7out        : LC3b_reg;

   -- Implicit buffer signal declarations
   SIGNAL ADDRESS_internal : LC3b_word;


   -- Component Declarations
   COMPONENT ADDR0
   PORT (
      ADDRESS  : IN     LC3b_word ;
      clk      : IN     std_logic ;
      ADDR0out : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT ADJ11
   PORT (
      clk      : IN     std_logic ;
      offset11 : IN     LC3b_offset11 ;
      ADJ11out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ4
   PORT (
      clk     : IN     std_logic ;
      imm4    : IN     LC3b_IMM4 ;
      ADJ4out : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ5
   PORT (
      clk     : IN     std_logic ;
      imm5    : IN     LC3b_IMM5 ;
      ADJ5out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ6
   PORT (
      clk     : IN     std_logic ;
      index6  : IN     LC3b_index6 ;
      ADJ6out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ6ns
   PORT (
      clk       : IN     std_logic ;
      index6    : IN     LC3b_index6 ;
      ADJ6nsout : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT ADJ8
   PORT (
      TrapVect8 : IN     LC3b_TrapVect8 ;
      clk       : IN     std_logic ;
      ADJ8out   : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ9
   PORT (
      clk     : IN     std_logic ;
      offset9 : IN     LC3b_offset9 ;
      ADJ9out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ALU
   PORT (
      ALUMuxout : IN     LC3b_word ;
      ALUop     : IN     LC3b_aluop ;
      RFAout    : IN     LC3b_word ;
      clk       : IN     std_logic ;
      ALUout    : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ALUtoH
   PORT (
      ALUout    : IN     LC3b_word ;
      clk       : IN     std_logic ;
      ALUtoHout : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT ALUtoL
   PORT (
      ALUout    : IN     LC3b_word ;
      clk       : IN     std_logic ;
      ALUtoLout : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT BRadd
   PORT (
      PCOffMuxOut : IN     LC3b_word ;
      PCout       : IN     LC3b_word ;
      clk         : IN     std_logic ;
      BRaddout    : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT GenCC
   PORT (
      RFMuxout : IN     LC3b_word ;
      clk      : IN     std_logic ;
      GenCCout : OUT    LC3b_cc 
   );
   END COMPONENT;
   COMPONENT IR
   PORT (
      LoadIR    : IN     std_logic ;
      MDRout    : IN     LC3b_word ;
      Opcode    : OUT    LC3b_opcode ;
      SrcA      : OUT    LC3b_reg ;
      SrcB      : OUT    LC3b_reg ;
      index6    : OUT    LC3b_index6 ;
      offset9   : OUT    LC3b_offset9 ;
      imm4      : OUT    LC3b_IMM4 ;
      imm5      : OUT    LC3b_IMM5 ;
      IR4       : OUT    std_logic ;
      IR5       : OUT    std_logic ;
      IR11      : OUT    std_logic ;
      TrapVect8 : OUT    LC3b_TrapVect8 ;
      pre_dest  : OUT    LC3b_reg ;
      clk       : IN     std_logic ;
      offset11  : OUT    LC3b_offset11 
   );
   END COMPONENT;
   COMPONENT MDRH
   PORT (
      MDRout  : IN     lc3b_word ;
      clk     : IN     std_logic ;
      MDRHout : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT MDRL
   PORT (
      MDRout  : IN     lc3b_word ;
      clk     : IN     std_logic ;
      MDRLout : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT NZP
   PORT (
      GenCCout : IN     LC3b_cc ;
      LoadNZP  : IN     std_logic ;
      clk      : IN     std_logic ;
      n        : OUT    std_logic ;
      p        : OUT    std_logic ;
      z        : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT NZPsplit
   PORT (
      clk    : IN     std_logic ;
      dest   : IN     LC3b_reg ;
      CheckN : OUT    std_logic ;
      CheckP : OUT    std_logic ;
      CheckZ : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Plus2
   PORT (
      PCout      : IN     LC3b_word ;
      clk        : IN     std_logic ;
      PCPlus2out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Reg16
   PORT (
      Input  : IN     lc3b_word ;
      RESET  : IN     std_logic ;
      clk    : IN     std_logic ;
      load   : IN     std_logic ;
      Output : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT RegFile
   PORT (
      RESET_L     : IN     std_logic ;
      RFMuxout    : IN     LC3b_word ;
      RegWrite    : IN     std_logic ;
      SrcB        : IN     LC3b_reg ;
      StoreMuxout : IN     LC3b_reg ;
      clk         : IN     std_logic ;
      dest        : IN     LC3b_reg ;
      RFAout      : OUT    LC3b_word ;
      RFBout      : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT StoreMux
   PORT (
      SrcA        : IN     LC3b_reg ;
      StoreSR     : IN     std_logic ;
      pre_dest    : IN     LC3b_reg ;
      StoreMuxout : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux4
   PORT (
      A   : IN     lc3b_word ;
      B   : IN     lc3b_word ;
      C   : IN     lc3b_word ;
      D   : IN     lc3b_word ;
      Sel : IN     lc3b_4mux_sel ;
      F   : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT reg7
   PORT (
      reg7out : OUT    LC3b_reg ;
      clk     : IN     std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADDR0 USE ENTITY ece411.ADDR0;
   FOR ALL : ADJ11 USE ENTITY ece411.ADJ11;
   FOR ALL : ADJ4 USE ENTITY ece411.ADJ4;
   FOR ALL : ADJ5 USE ENTITY ece411.ADJ5;
   FOR ALL : ADJ6 USE ENTITY ece411.ADJ6;
   FOR ALL : ADJ6ns USE ENTITY ece411.ADJ6ns;
   FOR ALL : ADJ8 USE ENTITY ece411.ADJ8;
   FOR ALL : ADJ9 USE ENTITY ece411.ADJ9;
   FOR ALL : ALU USE ENTITY ece411.ALU;
   FOR ALL : ALUtoH USE ENTITY ece411.ALUtoH;
   FOR ALL : ALUtoL USE ENTITY ece411.ALUtoL;
   FOR ALL : BRadd USE ENTITY ece411.BRadd;
   FOR ALL : GenCC USE ENTITY ece411.GenCC;
   FOR ALL : IR USE ENTITY ece411.IR;
   FOR ALL : MDRH USE ENTITY ece411.MDRH;
   FOR ALL : MDRL USE ENTITY ece411.MDRL;
   FOR ALL : NZP USE ENTITY ece411.NZP;
   FOR ALL : NZPsplit USE ENTITY ece411.NZPsplit;
   FOR ALL : Plus2 USE ENTITY ece411.Plus2;
   FOR ALL : Reg16 USE ENTITY ece411.Reg16;
   FOR ALL : RegFile USE ENTITY ece411.RegFile;
   FOR ALL : StoreMux USE ENTITY ece411.StoreMux;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : WordMux4 USE ENTITY ece411.WordMux4;
   FOR ALL : reg7 USE ENTITY ece411.reg7;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- Dataout = MDRout
   DATAOUT <= MDRout;


   -- Instance port mappings.
   aADDR0 : ADDR0
      PORT MAP (
         ADDRESS  => ADDRESS_internal,
         clk      => clk,
         ADDR0out => ADDR0out
      );
   aADJ11 : ADJ11
      PORT MAP (
         clk      => clk,
         offset11 => offset11,
         ADJ11out => ADJ11out
      );
   aADJ4 : ADJ4
      PORT MAP (
         clk     => clk,
         imm4    => imm4,
         ADJ4out => ADJ4out
      );
   aADJ5 : ADJ5
      PORT MAP (
         clk     => clk,
         imm5    => imm5,
         ADJ5out => ADJ5out
      );
   aADJ6 : ADJ6
      PORT MAP (
         clk     => clk,
         index6  => index6,
         ADJ6out => ADJ6out
      );
   aASJ6ns : ADJ6ns
      PORT MAP (
         clk       => clk,
         index6    => index6,
         ADJ6nsout => ADJ6nsout
      );
   aADJ8 : ADJ8
      PORT MAP (
         TrapVect8 => TrapVect8,
         clk       => clk,
         ADJ8out   => ADJ8out
      );
   aADJ9 : ADJ9
      PORT MAP (
         clk     => clk,
         offset9 => offset9,
         ADJ9out => ADJ9out
      );
   aALU : ALU
      PORT MAP (
         ALUMuxout => ALUMuxout,
         ALUop     => ALUop,
         RFAout    => RFAout,
         clk       => clk,
         ALUout    => ALUout
      );
   aALUtoH : ALUtoH
      PORT MAP (
         ALUout    => ALUout,
         clk       => clk,
         ALUtoHout => ALUtoHout
      );
   aALUtoL : ALUtoL
      PORT MAP (
         ALUout    => ALUout,
         clk       => clk,
         ALUtoLout => ALUtoLout
      );
   aBRadd : BRadd
      PORT MAP (
         PCOffMuxOut => PCOffMuxOut,
         PCout       => PCout,
         clk         => clk,
         BRaddout    => BRaddout
      );
   aGenCC : GenCC
      PORT MAP (
         RFMuxout => RFMuxout,
         clk      => clk,
         GenCCout => GenCCout
      );
   aIR : IR
      PORT MAP (
         LoadIR    => LoadIR,
         MDRout    => MDRout,
         Opcode    => Opcode,
         SrcA      => SrcA,
         SrcB      => SrcB,
         index6    => index6,
         offset9   => offset9,
         imm4      => imm4,
         imm5      => imm5,
         IR4       => IR4,
         IR5       => IR5,
         IR11      => IR11,
         TrapVect8 => TrapVect8,
         pre_dest  => pre_dest,
         clk       => clk,
         offset11  => offset11
      );
   aMDRH : MDRH
      PORT MAP (
         MDRout  => MDRout,
         clk     => clk,
         MDRHout => MDRHout
      );
   aMDRL : MDRL
      PORT MAP (
         MDRout  => MDRout,
         clk     => clk,
         MDRLout => MDRLout
      );
   aNZP : NZP
      PORT MAP (
         GenCCout => GenCCout,
         LoadNZP  => LoadNZP,
         clk      => clk,
         n        => n,
         p        => p,
         z        => z
      );
   aNZPsplit : NZPsplit
      PORT MAP (
         clk    => clk,
         dest   => dest,
         CheckN => CheckN,
         CheckP => CheckP,
         CheckZ => CheckZ
      );
   aPlus2 : Plus2
      PORT MAP (
         PCout      => PCout,
         clk        => clk,
         PCPlus2out => PCPlus2out
      );
   MAR : Reg16
      PORT MAP (
         Input  => MARMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadMAR,
         Output => ADDRESS_internal
      );
   MDR : Reg16
      PORT MAP (
         Input  => MDRMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadMDR,
         Output => MDRout
      );
   PC : Reg16
      PORT MAP (
         Input  => PCMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadPC,
         Output => PCout
      );
   aRegFile : RegFile
      PORT MAP (
         RESET_L     => RESET_L,
         RFMuxout    => RFMuxout,
         RegWrite    => RegWrite,
         SrcB        => SrcB,
         StoreMuxout => StoreMuxout,
         clk         => clk,
         dest        => dest,
         RFAout      => RFAout,
         RFBout      => RFBout
      );
   aStoreMux : StoreMux
      PORT MAP (
         SrcA        => SrcA,
         StoreSR     => StoreSR,
         pre_dest    => pre_dest,
         StoreMuxout => StoreMuxout
      );
   destMux : StoreMux
      PORT MAP (
         SrcA        => reg7out,
         StoreSR     => destMuxSel,
         pre_dest    => pre_dest,
         StoreMuxout => dest
      );
   ALUMux : WordMux2
      PORT MAP (
         A   => RFBout,
         B   => ImmMuxOut,
         Sel => ALUMuxSel,
         F   => ALUMuxout
      );
   LEAMux : WordMux2
      PORT MAP (
         A   => ALUout,
         B   => BRaddout,
         Sel => LEAMuxSel,
         F   => LEAMuxout
      );
   MARMUX : WordMux2
      PORT MAP (
         A   => TRAPMuxout,
         B   => MDRtoMARMuxout,
         Sel => MARMuxSel,
         F   => MARMuxout
      );
   MDRMux : WordMux2
      PORT MAP (
         A   => DATAIN,
         B   => DataOutMuxout,
         Sel => MDRMuxSel,
         F   => MDRMuxout
      );
   MDRPCMux : WordMux2
      PORT MAP (
         A   => PCPlus2out,
         B   => MDRout,
         Sel => MDRPCMuxSel,
         F   => MDRPCMuxout
      );
   MDRtoMARMux : WordMux2
      PORT MAP (
         A   => ALUout,
         B   => MDRout,
         Sel => MDRtoMARMuxSel,
         F   => MDRtoMARMuxout
      );
   PCMux : WordMux2
      PORT MAP (
         A   => MDRPCMuxout,
         B   => RegPCMuxOut,
         Sel => PCMuxSel,
         F   => PCMuxout
      );
   PCOffMux : WordMux2
      PORT MAP (
         A   => ADJ9out,
         B   => ADJ11out,
         Sel => PCOffMuxSel,
         F   => PCOffMuxOut
      );
   PCRegMux : WordMux2
      PORT MAP (
         A   => DataMuxout,
         B   => PCout,
         Sel => PCRegMuxSel,
         F   => PCRegMuxout
      );
   RFMux : WordMux2
      PORT MAP (
         A   => PCRegMuxout,
         B   => LEAMuxout,
         Sel => RFMuxSel,
         F   => RFMuxout
      );
   RegPCMux : WordMux2
      PORT MAP (
         A   => BRaddout,
         B   => ALUout,
         Sel => RegPCMuxSel,
         F   => RegPCMuxOut
      );
   TRAPMux : WordMux2
      PORT MAP (
         A   => PCout,
         B   => ADJ8out,
         Sel => TRAPMuxSel,
         F   => TRAPMuxout
      );
   DataMux : WordMux4
      PORT MAP (
         A   => MDRout,
         B   => MDRout,
         C   => MDRLout,
         D   => MDRHout,
         Sel => DataMuxSel,
         F   => DataMuxout
      );
   DataOutMux : WordMux4
      PORT MAP (
         A   => ALUout,
         B   => ALUout,
         C   => ALUtoLout,
         D   => ALUtoHout,
         Sel => DataOutMuxSel,
         F   => DataOutMuxout
      );
   ImmMux : WordMux4
      PORT MAP (
         A   => ADJ6out,
         B   => ADJ6nsout,
         C   => ADJ5out,
         D   => ADJ4out,
         Sel => ImmMuxSel,
         F   => ImmMuxOut
      );
   areg7 : reg7
      PORT MAP (
         reg7out => reg7out,
         clk     => clk
      );

   -- Implicit buffered output assignments
   ADDRESS <= ADDRESS_internal;

END struct;
