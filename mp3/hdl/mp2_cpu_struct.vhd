-- VHDL Entity ece411.mp2_CPU.symbol
--
-- Created:
--          by - hwoods2.stdt (eelnx34.ews.illinois.edu)
--          at - 16:06:16 10/08/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY mp2_CPU IS
   PORT( 
      RESET_L : IN     std_logic;
      START_H : IN     std_logic;
      clk     : IN     std_logic
   );

-- Declarations

END mp2_CPU ;

--
-- VHDL Architecture ece411.mp2_CPU.struct
--
-- Created:
--          by - hwoods2.stdt (eelnx34.ews.illinois.edu)
--          at - 16:06:16 10/08/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;

ARCHITECTURE struct OF mp2_CPU IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADDRESS          : LC3b_word;
   SIGNAL ADJ45MuxSel      : std_logic;
   SIGNAL ADJ56MuxSel      : std_logic;
   SIGNAL ADJ8ByteMuxSel   : std_logic;
   SIGNAL ALUMuxSel        : std_logic;
   SIGNAL ALUop            : LC3b_aluop;
   SIGNAL BRaddPCMuxSel    : std_logic;
   SIGNAL BraddRFAMuxSel   : std_logic;
   SIGNAL CheckN           : std_logic;
   SIGNAL CheckP           : std_logic;
   SIGNAL CheckZ           : std_logic;
   SIGNAL ClrLHMuxSel      : std_logic;
   SIGNAL DATAIN           : LC3b_word;
   SIGNAL DATAOUT          : LC3b_word;
   SIGNAL JSRMDRMuxSel     : std_logic;
   SIGNAL JSRRFAMuxSel     : std_logic;
   SIGNAL LoadIR           : std_logic;
   SIGNAL LoadMAR          : std_logic;
   SIGNAL LoadMDR          : std_logic;
   SIGNAL LoadNZP          : std_logic;
   SIGNAL LoadPC           : std_logic;
   SIGNAL MARMuxSel        : std_logic;
   SIGNAL MDRMuxSel        : std_logic;
   SIGNAL MREAD_L          : std_logic;
   SIGNAL MRESP_H          : std_logic;
   SIGNAL MWRITEH_L        : std_logic;
   SIGNAL MWRITEL_L        : std_logic;
   SIGNAL MdrMarMuxSel     : std_logic;
   SIGNAL Opcode           : LC3b_opcode;
   SIGNAL PCMuxSel         : std_logic;
   SIGNAL PCRegMuxSel      : std_logic;
   SIGNAL RFALowByteMuxSel : std_logic;
   SIGNAL RFClrMuxSel      : std_logic;
   SIGNAL RFMuxSel         : std_logic;
   SIGNAL RegWrite         : std_logic;
   SIGNAL RipBit11out      : std_logic;
   SIGNAL RipBit4out       : std_logic;
   SIGNAL RipBit5out       : std_logic;
   SIGNAL RipRFABit0out    : std_logic;
   SIGNAL StoreSR          : std_logic;
   SIGNAL destR7Muxsel     : std_logic;
   SIGNAL n                : std_logic;
   SIGNAL offset64MuxSel   : std_logic;
   SIGNAL p                : std_logic;
   SIGNAL z                : std_logic;


   -- Component Declarations
   COMPONENT Control
   PORT (
      CheckN           : IN     std_logic ;
      CheckP           : IN     std_logic ;
      CheckZ           : IN     std_logic ;
      MRESP_H          : IN     std_logic ;
      Opcode           : IN     LC3b_opcode ;
      RESET_L          : IN     std_logic ;
      RipBit11out      : IN     std_logic ;
      RipBit4out       : IN     std_logic ;
      RipBit5out       : IN     std_logic ;
      RipRFABit0out    : IN     std_logic ;
      START_H          : IN     std_logic ;
      clk              : IN     std_logic ;
      n                : IN     std_logic ;
      p                : IN     std_logic ;
      z                : IN     std_logic ;
      ADJ45MuxSel      : OUT    std_logic ;
      ADJ56MuxSel      : OUT    std_logic ;
      ADJ8ByteMuxSel   : OUT    std_logic ;
      ALUMuxSel        : OUT    std_logic ;
      ALUop            : OUT    LC3b_aluop ;
      BRaddPCMuxSel    : OUT    std_logic ;
      BraddRFAMuxSel   : OUT    std_logic ;
      ClrLHMuxSel      : OUT    std_logic ;
      JSRMDRMuxSel     : OUT    std_logic ;
      JSRRFAMuxSel     : OUT    std_logic ;
      LoadIR           : OUT    std_logic ;
      LoadMAR          : OUT    std_logic ;
      LoadMDR          : OUT    std_logic ;
      LoadNZP          : OUT    std_logic ;
      LoadPC           : OUT    std_logic ;
      MARMuxSel        : OUT    std_logic ;
      MDRMuxSel        : OUT    std_logic ;
      MREAD_L          : OUT    std_logic ;
      MWRITEH_L        : OUT    std_logic ;
      MWRITEL_L        : OUT    std_logic ;
      MdrMarMuxSel     : OUT    std_logic ;
      PCMuxSel         : OUT    std_logic ;
      PCRegMuxSel      : OUT    std_logic ;
      RFALowByteMuxSel : OUT    std_logic ;
      RFClrMuxSel      : OUT    std_logic ;
      RFMuxSel         : OUT    std_logic ;
      RegWrite         : OUT    std_logic ;
      StoreSR          : OUT    std_logic ;
      destR7Muxsel     : OUT    std_logic ;
      offset64MuxSel   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Datapath
   PORT (
      ADJ45MuxSel      : IN     std_logic ;
      ADJ56MuxSel      : IN     std_logic ;
      ADJ8ByteMuxSel   : IN     std_logic ;
      ALUMuxSel        : IN     std_logic ;
      ALUop            : IN     LC3b_aluop ;
      BRaddPCMuxSel    : IN     std_logic ;
      BraddRFAMuxSel   : IN     std_logic ;
      ClrLHMuxSel      : IN     std_logic ;
      DATAIN           : IN     LC3b_word ;
      JSRMDRMuxSel     : IN     std_logic ;
      JSRRFAMuxSel     : IN     std_logic ;
      LoadIR           : IN     std_logic ;
      LoadMAR          : IN     std_logic ;
      LoadMDR          : IN     std_logic ;
      LoadNZP          : IN     std_logic ;
      LoadPC           : IN     std_logic ;
      MARMuxSel        : IN     std_logic ;
      MDRMuxSel        : IN     std_logic ;
      MdrMarMuxSel     : IN     std_logic ;
      PCMuxSel         : IN     std_logic ;
      PCRegMuxSel      : IN     std_logic ;
      RESET_L          : IN     std_logic ;
      RFALowByteMuxSel : IN     std_logic ;
      RFClrMuxSel      : IN     std_logic ;
      RFMuxSel         : IN     std_logic ;
      RegWrite         : IN     std_logic ;
      StoreSR          : IN     std_logic ;
      clk              : IN     std_logic ;
      destR7Muxsel     : IN     std_logic ;
      offset64MuxSel   : IN     std_logic ;
      ADDRESS          : OUT    LC3b_word ;
      CheckN           : OUT    std_logic ;
      CheckP           : OUT    std_logic ;
      CheckZ           : OUT    std_logic ;
      DATAOUT          : OUT    LC3b_word ;
      Opcode           : OUT    LC3b_opcode ;
      RipBit11out      : OUT    std_logic ;
      RipBit4out       : OUT    std_logic ;
      RipBit5out       : OUT    std_logic ;
      RipRFABit0out    : OUT    std_logic ;
      n                : OUT    std_logic ;
      p                : OUT    std_logic ;
      z                : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Memory
   PORT (
      Address   : IN     LC3b_word ;
      DATAOUT   : IN     LC3b_word ;
      MREAD_L   : IN     std_logic ;
      MWRITEH_L : IN     std_logic ;
      MWRITEL_L : IN     std_logic ;
      RESET_L   : IN     std_logic ;
      clk       : IN     std_logic ;
      DATAIN    : OUT    LC3b_word ;
      MRESP_H   : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : Control USE ENTITY ece411.Control;
   FOR ALL : Datapath USE ENTITY ece411.Datapath;
   FOR ALL : Memory USE ENTITY ece411.Memory;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   ControlUnit : Control
      PORT MAP (
         CheckN           => CheckN,
         CheckP           => CheckP,
         CheckZ           => CheckZ,
         MRESP_H          => MRESP_H,
         Opcode           => Opcode,
         RESET_L          => RESET_L,
         RipBit11out      => RipBit11out,
         RipBit4out       => RipBit4out,
         RipBit5out       => RipBit5out,
         RipRFABit0out    => RipRFABit0out,
         START_H          => START_H,
         clk              => clk,
         n                => n,
         p                => p,
         z                => z,
         ADJ45MuxSel      => ADJ45MuxSel,
         ADJ56MuxSel      => ADJ56MuxSel,
         ADJ8ByteMuxSel   => ADJ8ByteMuxSel,
         ALUMuxSel        => ALUMuxSel,
         ALUop            => ALUop,
         BRaddPCMuxSel    => BRaddPCMuxSel,
         BraddRFAMuxSel   => BraddRFAMuxSel,
         ClrLHMuxSel      => ClrLHMuxSel,
         JSRMDRMuxSel     => JSRMDRMuxSel,
         JSRRFAMuxSel     => JSRRFAMuxSel,
         LoadIR           => LoadIR,
         LoadMAR          => LoadMAR,
         LoadMDR          => LoadMDR,
         LoadNZP          => LoadNZP,
         LoadPC           => LoadPC,
         MARMuxSel        => MARMuxSel,
         MDRMuxSel        => MDRMuxSel,
         MREAD_L          => MREAD_L,
         MWRITEH_L        => MWRITEH_L,
         MWRITEL_L        => MWRITEL_L,
         MdrMarMuxSel     => MdrMarMuxSel,
         PCMuxSel         => PCMuxSel,
         PCRegMuxSel      => PCRegMuxSel,
         RFALowByteMuxSel => RFALowByteMuxSel,
         RFClrMuxSel      => RFClrMuxSel,
         RFMuxSel         => RFMuxSel,
         RegWrite         => RegWrite,
         StoreSR          => StoreSR,
         destR7Muxsel     => destR7Muxsel,
         offset64MuxSel   => offset64MuxSel
      );
   theDatapath : Datapath
      PORT MAP (
         ADJ45MuxSel      => ADJ45MuxSel,
         ADJ56MuxSel      => ADJ56MuxSel,
         ADJ8ByteMuxSel   => ADJ8ByteMuxSel,
         ALUMuxSel        => ALUMuxSel,
         ALUop            => ALUop,
         BRaddPCMuxSel    => BRaddPCMuxSel,
         BraddRFAMuxSel   => BraddRFAMuxSel,
         ClrLHMuxSel      => ClrLHMuxSel,
         DATAIN           => DATAIN,
         JSRMDRMuxSel     => JSRMDRMuxSel,
         JSRRFAMuxSel     => JSRRFAMuxSel,
         LoadIR           => LoadIR,
         LoadMAR          => LoadMAR,
         LoadMDR          => LoadMDR,
         LoadNZP          => LoadNZP,
         LoadPC           => LoadPC,
         MARMuxSel        => MARMuxSel,
         MDRMuxSel        => MDRMuxSel,
         MdrMarMuxSel     => MdrMarMuxSel,
         PCMuxSel         => PCMuxSel,
         PCRegMuxSel      => PCRegMuxSel,
         RESET_L          => RESET_L,
         RFALowByteMuxSel => RFALowByteMuxSel,
         RFClrMuxSel      => RFClrMuxSel,
         RFMuxSel         => RFMuxSel,
         RegWrite         => RegWrite,
         StoreSR          => StoreSR,
         clk              => clk,
         destR7Muxsel     => destR7Muxsel,
         offset64MuxSel   => offset64MuxSel,
         ADDRESS          => ADDRESS,
         CheckN           => CheckN,
         CheckP           => CheckP,
         CheckZ           => CheckZ,
         DATAOUT          => DATAOUT,
         Opcode           => Opcode,
         RipBit11out      => RipBit11out,
         RipBit4out       => RipBit4out,
         RipBit5out       => RipBit5out,
         RipRFABit0out    => RipRFABit0out,
         n                => n,
         p                => p,
         z                => z
      );
   DRAM : Memory
      PORT MAP (
         ADDRESS   => ADDRESS,
         DATAOUT   => DATAOUT,
         MREAD_L   => MREAD_L,
         MWRITEH_L => MWRITEH_L,
         MWRITEL_L => MWRITEL_L,
         RESET_L   => RESET_L,
         clk       => clk,
         DATAIN    => DATAIN,
         MRESP_H   => MRESP_H
      );

END struct;
