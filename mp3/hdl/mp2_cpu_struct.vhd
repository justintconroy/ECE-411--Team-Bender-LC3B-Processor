-- VHDL Entity ece411.mp2_CPU.symbol
--
-- Created:
--          by - jconroy2.stdt (eelnx39.ews.illinois.edu)
--          at - 20:57:48 10/18/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY mp2_CPU IS
   PORT( 
      RESET_L : IN     std_logic;
      START_H : IN     std_logic;
      clk     : IN     std_logic
   );

-- Declarations

END mp2_CPU ;

--
-- VHDL Architecture ece411.mp2_CPU.struct
--
-- Created:
--          by - jconroy2.stdt (eelnx39.ews.illinois.edu)
--          at - 20:57:48 10/18/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;

ARCHITECTURE struct OF mp2_CPU IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADDR0out       : std_logic;
   SIGNAL ADDRESS        : LC3b_word;
   SIGNAL ALUMuxSel      : std_logic;
   SIGNAL ALUop          : LC3b_aluop;
   SIGNAL CheckN         : std_logic;
   SIGNAL CheckP         : std_logic;
   SIGNAL CheckZ         : std_logic;
   SIGNAL DATAIN         : LC3b_word;
   SIGNAL DATAOUT        : LC3b_word;
   SIGNAL DataMuxSel     : lc3b_4mux_sel;
   SIGNAL DataOutMuxSel  : lc3b_4mux_sel;
   SIGNAL IR11           : std_logic;
   SIGNAL IR4            : std_logic;
   SIGNAL IR5            : std_logic;
   SIGNAL ImmMuxSel      : lc3b_4mux_sel;
   SIGNAL LEAMuxSel      : std_logic;
   SIGNAL LoadIR         : std_logic;
   SIGNAL LoadMAR        : std_logic;
   SIGNAL LoadMDR        : std_logic;
   SIGNAL LoadNZP        : std_logic;
   SIGNAL LoadPC         : std_logic;
   SIGNAL MARMuxSel      : std_logic;
   SIGNAL MDRMuxSel      : std_logic;
   SIGNAL MDRPCMuxSel    : std_logic;
   SIGNAL MDRtoMARMuxSel : std_logic;
   SIGNAL MREAD_L        : std_logic;
   SIGNAL MRESP_H        : std_logic;
   SIGNAL MWRITEH_L      : std_logic;
   SIGNAL MWRITEL_L      : std_logic;
   SIGNAL Opcode         : LC3b_opcode;
   SIGNAL PCMuxSel       : std_logic;
   SIGNAL PCOffMuxSel    : std_logic;
   SIGNAL PCRegMuxSel    : std_logic;
   SIGNAL RFMuxSel       : std_logic;
   SIGNAL RegPCMuxSel    : std_logic;
   SIGNAL RegWrite       : std_logic;
   SIGNAL StoreSR        : std_logic;
   SIGNAL TRAPMuxSel     : std_logic;
   SIGNAL destMuxSel     : std_logic;
   SIGNAL n              : std_logic;
   SIGNAL p              : std_logic;
   SIGNAL z              : std_logic;


   -- Component Declarations
   COMPONENT Control
   PORT (
      ADDR0out       : IN     std_logic ;
      CheckN         : IN     std_logic ;
      CheckP         : IN     std_logic ;
      CheckZ         : IN     std_logic ;
      IR11           : IN     std_logic ;
      IR4            : IN     std_logic ;
      IR5            : IN     std_logic ;
      MRESP_H        : IN     std_logic ;
      Opcode         : IN     LC3b_opcode ;
      RESET_L        : IN     std_logic ;
      START_H        : IN     std_logic ;
      clk            : IN     std_logic ;
      n              : IN     std_logic ;
      p              : IN     std_logic ;
      z              : IN     std_logic ;
      ALUMuxSel      : OUT    std_logic ;
      ALUop          : OUT    LC3b_aluop ;
      DataMuxSel     : OUT    lc3b_4mux_sel ;
      DataOutMuxSel  : OUT    lc3b_4mux_sel ;
      ImmMuxSel      : OUT    lc3b_4mux_sel ;
      LEAMuxSel      : OUT    std_logic ;
      LoadIR         : OUT    std_logic ;
      LoadMAR        : OUT    std_logic ;
      LoadMDR        : OUT    std_logic ;
      LoadNZP        : OUT    std_logic ;
      LoadPC         : OUT    std_logic ;
      MARMuxSel      : OUT    std_logic ;
      MDRMuxSel      : OUT    std_logic ;
      MDRPCMuxSel    : OUT    std_logic ;
      MDRtoMARMuxSel : OUT    std_logic ;
      MREAD_L        : OUT    std_logic ;
      MWRITEH_L      : OUT    std_logic ;
      MWRITEL_L      : OUT    std_logic ;
      PCMuxSel       : OUT    std_logic ;
      PCOffMuxSel    : OUT    std_logic ;
      PCRegMuxSel    : OUT    std_logic ;
      RFMuxSel       : OUT    std_logic ;
      RegPCMuxSel    : OUT    std_logic ;
      RegWrite       : OUT    std_logic ;
      StoreSR        : OUT    std_logic ;
      TRAPMuxSel     : OUT    std_logic ;
      destMuxSel     : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Datapath
   PORT (
      ALUMuxSel      : IN     std_logic ;
      ALUop          : IN     LC3b_aluop ;
      DATAIN         : IN     LC3b_word ;
      DataMuxSel     : IN     lc3b_4mux_sel ;
      DataOutMuxSel  : IN     lc3b_4mux_sel ;
      ImmMuxSel      : IN     lc3b_4mux_sel ;
      LEAMuxSel      : IN     std_logic ;
      LoadIR         : IN     std_logic ;
      LoadMAR        : IN     std_logic ;
      LoadMDR        : IN     std_logic ;
      LoadNZP        : IN     std_logic ;
      LoadPC         : IN     std_logic ;
      MARMuxSel      : IN     std_logic ;
      MDRMuxSel      : IN     std_logic ;
      MDRPCMuxSel    : IN     std_logic ;
      MDRtoMARMuxSel : IN     std_logic ;
      PCMuxSel       : IN     std_logic ;
      PCOffMuxSel    : IN     std_logic ;
      PCRegMuxSel    : IN     std_logic ;
      RESET_L        : IN     std_logic ;
      RFMuxSel       : IN     std_logic ;
      RegPCMuxSel    : IN     std_logic ;
      RegWrite       : IN     std_logic ;
      StoreSR        : IN     std_logic ;
      TRAPMuxSel     : IN     std_logic ;
      clk            : IN     std_logic ;
      destMuxSel     : IN     std_logic ;
      ADDR0out       : OUT    std_logic ;
      ADDRESS        : OUT    LC3b_word ;
      CheckN         : OUT    std_logic ;
      CheckP         : OUT    std_logic ;
      CheckZ         : OUT    std_logic ;
      DATAOUT        : OUT    LC3b_word ;
      IR11           : OUT    std_logic ;
      IR4            : OUT    std_logic ;
      IR5            : OUT    std_logic ;
      Opcode         : OUT    LC3b_opcode ;
      n              : OUT    std_logic ;
      p              : OUT    std_logic ;
      z              : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Memory
   PORT (
      ADDRESS   : IN     LC3b_word ;
      DATAOUT   : IN     LC3b_word ;
      MREAD_L   : IN     std_logic ;
      MWRITEH_L : IN     std_logic ;
      MWRITEL_L : IN     std_logic ;
      clk       : IN     std_logic ;
      reset_l   : IN     std_logic ;
      DATAIN    : OUT    LC3b_word ;
      MRESP_H   : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : Control USE ENTITY ece411.Control;
   FOR ALL : Datapath USE ENTITY ece411.Datapath;
   FOR ALL : Memory USE ENTITY ece411.Memory;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   ControlUnit : Control
      PORT MAP (
         ADDR0out       => ADDR0out,
         CheckN         => CheckN,
         CheckP         => CheckP,
         CheckZ         => CheckZ,
         IR11           => IR11,
         IR4            => IR4,
         IR5            => IR5,
         MRESP_H        => MRESP_H,
         Opcode         => Opcode,
         RESET_L        => RESET_L,
         START_H        => START_H,
         clk            => clk,
         n              => n,
         p              => p,
         z              => z,
         ALUMuxSel      => ALUMuxSel,
         ALUop          => ALUop,
         DataMuxSel     => DataMuxSel,
         DataOutMuxSel  => DataOutMuxSel,
         ImmMuxSel      => ImmMuxSel,
         LEAMuxSel      => LEAMuxSel,
         LoadIR         => LoadIR,
         LoadMAR        => LoadMAR,
         LoadMDR        => LoadMDR,
         LoadNZP        => LoadNZP,
         LoadPC         => LoadPC,
         MARMuxSel      => MARMuxSel,
         MDRMuxSel      => MDRMuxSel,
         MDRPCMuxSel    => MDRPCMuxSel,
         MDRtoMARMuxSel => MDRtoMARMuxSel,
         MREAD_L        => MREAD_L,
         MWRITEH_L      => MWRITEH_L,
         MWRITEL_L      => MWRITEL_L,
         PCMuxSel       => PCMuxSel,
         PCOffMuxSel    => PCOffMuxSel,
         PCRegMuxSel    => PCRegMuxSel,
         RFMuxSel       => RFMuxSel,
         RegPCMuxSel    => RegPCMuxSel,
         RegWrite       => RegWrite,
         StoreSR        => StoreSR,
         TRAPMuxSel     => TRAPMuxSel,
         destMuxSel     => destMuxSel
      );
   theDatapath : Datapath
      PORT MAP (
         ALUMuxSel      => ALUMuxSel,
         ALUop          => ALUop,
         DATAIN         => DATAIN,
         DataMuxSel     => DataMuxSel,
         DataOutMuxSel  => DataOutMuxSel,
         ImmMuxSel      => ImmMuxSel,
         LEAMuxSel      => LEAMuxSel,
         LoadIR         => LoadIR,
         LoadMAR        => LoadMAR,
         LoadMDR        => LoadMDR,
         LoadNZP        => LoadNZP,
         LoadPC         => LoadPC,
         MARMuxSel      => MARMuxSel,
         MDRMuxSel      => MDRMuxSel,
         MDRPCMuxSel    => MDRPCMuxSel,
         MDRtoMARMuxSel => MDRtoMARMuxSel,
         PCMuxSel       => PCMuxSel,
         PCOffMuxSel    => PCOffMuxSel,
         PCRegMuxSel    => PCRegMuxSel,
         RESET_L        => RESET_L,
         RFMuxSel       => RFMuxSel,
         RegPCMuxSel    => RegPCMuxSel,
         RegWrite       => RegWrite,
         StoreSR        => StoreSR,
         TRAPMuxSel     => TRAPMuxSel,
         clk            => clk,
         destMuxSel     => destMuxSel,
         ADDR0out       => ADDR0out,
         ADDRESS        => ADDRESS,
         CheckN         => CheckN,
         CheckP         => CheckP,
         CheckZ         => CheckZ,
         DATAOUT        => DATAOUT,
         IR11           => IR11,
         IR4            => IR4,
         IR5            => IR5,
         Opcode         => Opcode,
         n              => n,
         p              => p,
         z              => z
      );
   DRAM : Memory
      PORT MAP (
         ADDRESS   => ADDRESS,
         DATAOUT   => DATAOUT,
         MREAD_L   => MREAD_L,
         MWRITEH_L => MWRITEH_L,
         MWRITEL_L => MWRITEL_L,
         RESET_L   => RESET_L,
         clk       => clk,
         DATAIN    => DATAIN,
         MRESP_H   => MRESP_H
      );

END struct;
