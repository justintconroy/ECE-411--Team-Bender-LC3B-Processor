-- VHDL Entity ece411.Cache_Controller.interface
--
-- Created:
--          by - jconroy2.stdt (eelnx39.ews.illinois.edu)
--          at - 20:57:46 10/18/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
USE ieee.NUMERIC_STD.all;

ENTITY Cache_Controller IS
   PORT( 
      clk          : IN     std_logic;
      dirty        : IN     std_logic;
      miss         : IN     std_logic;
      pmresp_h     : IN     std_logic;
      reset_l      : IN     std_logic;
      in_idlehit   : OUT    std_logic;
      in_load      : OUT    std_logic;
      in_writeback : OUT    std_logic;
      pmread_l     : OUT    std_logic;
      pmwrite_l    : OUT    std_logic
   );

-- Declarations

END Cache_Controller ;

--
-- VHDL Architecture ece411.Cache_Controller.fsm
--
-- Created:
--          by - jconroy2.stdt (eelnx39.ews.illinois.edu)
--          at - 20:57:46 10/18/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF Cache_Controller IS

   TYPE STATE_TYPE IS (
      IdleHit,
      WriteBack,
      Load
   );
 
   -- State vector declaration
   ATTRIBUTE state_vector : string;
   ATTRIBUTE state_vector OF fsm : ARCHITECTURE IS "current_state";

   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      reset_l
   )
   -----------------------------------------------------------------
   BEGIN
      IF (reset_l = '0') THEN
         current_state <= IdleHit;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      current_state,
      dirty,
      miss,
      pmresp_h
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN IdleHit => 
            IF ((miss = '1') AND
                (dirty = '1')) THEN 
               next_state <= WriteBack;
            ELSIF ((miss = '1') AND
                   (dirty = '0')) THEN 
               next_state <= Load;
            ELSE
               next_state <= IdleHit;
            END IF;
         WHEN WriteBack => 
            IF (PMRESP_H = '1') THEN 
               next_state <= Load;
            ELSE
               next_state <= WriteBack;
            END IF;
         WHEN Load => 
            IF (PMRESP_H = '1') THEN 
               next_state <= IdleHit;
            ELSE
               next_state <= Load;
            END IF;
         WHEN OTHERS =>
            next_state <= IdleHit;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      in_idlehit <= '0';
      in_load <= '0';
      in_writeback <= '0';
      pmread_l <= '1';
      pmwrite_l <= '1';

      -- Combined Actions
      CASE current_state IS
         WHEN IdleHit => 
            in_idlehit <= '1';
         WHEN WriteBack => 
            PMWRITE_L <= '0' after 2 ns;
            in_writeback <= '1';
         WHEN Load => 
            PMREAD_L <= '0' after 2 ns;
            in_load <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
