-- VHDL Entity ece411.Control.interface
--
-- Created:
--          by - hwoods2.stdt (eelnx24.ews.illinois.edu)
--          at - 10:31:18 09/17/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Control IS
   PORT( 
      CheckN           : IN     std_logic;
      CheckP           : IN     std_logic;
      CheckZ           : IN     std_logic;
      MRESP_H          : IN     std_logic;
      Opcode           : IN     LC3b_opcode;
      RESET_L          : IN     std_logic;
      RipBit11out      : IN     std_logic;
      RipBit4out       : IN     std_logic;
      RipBit5out       : IN     std_logic;
      RipRFABit0out    : IN     std_logic;
      START_H          : IN     std_logic;
      clk              : IN     std_logic;
      n                : IN     std_logic;
      p                : IN     std_logic;
      z                : IN     std_logic;
      ADJ45MuxSel      : OUT    std_logic;
      ADJ56MuxSel      : OUT    std_logic;
      ADJ8ByteMuxSel   : OUT    std_logic;
      ALUMuxSel        : OUT    std_logic;
      ALUop            : OUT    LC3b_aluop;
      BRaddPCMuxSel    : OUT    std_logic;
      BraddRFAMuxSel   : OUT    std_logic;
      ClrLHMuxSel      : OUT    std_logic;
      JSRMDRMuxSel     : OUT    std_logic;
      JSRRFAMuxSel     : OUT    std_logic;
      LoadIR           : OUT    std_logic;
      LoadMAR          : OUT    std_logic;
      LoadMDR          : OUT    std_logic;
      LoadNZP          : OUT    std_logic;
      LoadPC           : OUT    std_logic;
      MARMuxSel        : OUT    std_logic;
      MDRMuxSel        : OUT    std_logic;
      MREAD_L          : OUT    std_logic;
      MWRITEH_L        : OUT    std_logic;
      MWRITEL_L        : OUT    std_logic;
      MdrMarMuxSel     : OUT    std_logic;
      PCMuxSel         : OUT    std_logic;
      PCRegMuxSel      : OUT    std_logic;
      RFALowByteMuxSel : OUT    std_logic;
      RFClrMuxSel      : OUT    std_logic;
      RFMuxSel         : OUT    std_logic;
      RegWrite         : OUT    std_logic;
      StoreSR          : OUT    std_logic;
      destR7Muxsel     : OUT    std_logic;
      offset64MuxSel   : OUT    std_logic
   );

-- Declarations

END Control ;

--
-- VHDL Architecture ece411.Control.fsm
--
-- Created:
--          by - hwoods2.stdt (eelnx24.ews.illinois.edu)
--          at - 10:31:19 09/17/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF Control IS

   TYPE STATE_TYPE IS (
      Reset,
      Decode,
      BR2,
      BR1,
      L_Not,
      IF1,
      CalcADDR,
      IF2,
      IF3,
      ST1,
      LD1,
      ST2,
      LD2,
      ADDReg,
      DecodeADD,
      ADDImm5,
      ANDReg,
      DecodeAND,
      ANDImm5,
      JMP,
      LEA,
      DecodeJSR,
      JSR0,
      JSRR0,
      JSR1,
      JSRR1,
      DecodeSHF,
      shfSRL,
      shfSLL,
      shfSRA,
      CalcAddrI,
      STI3,
      LDI1,
      STI2,
      LDI2,
      STI4,
      LDI3,
      LDI4,
      STI1,
      TRAP0,
      TRAP1,
      CalcAddrB,
      LDB0,
      STB0,
      STB1,
      STB2,
      STB3,
      STB4,
      LDB1,
      LDB2,
      LDB3,
      LDB4,
      TRAP2,
      TRAP3
   );
 
   -- State vector declaration
   ATTRIBUTE state_vector : string;
   ATTRIBUTE state_vector OF fsm : ARCHITECTURE IS "current_state";

   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      RESET_L
   )
   -----------------------------------------------------------------
   BEGIN
      IF (RESET_L = '0') THEN
         current_state <= Reset;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      CheckN,
      CheckP,
      CheckZ,
      MRESP_H,
      Opcode,
      RipBit11out,
      RipBit4out,
      RipBit5out,
      RipRFABit0out,
      START_H,
      current_state,
      n,
      p,
      z
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN Reset => 
            IF (START_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= Reset;
            END IF;
         WHEN Decode => 
            IF (Opcode = op_br) THEN 
               next_state <= BR1;
            ELSIF ((Opcode = op_ldr) OR 
                   (Opcode = op_str)) THEN 
               next_state <= CalcADDR;
            ELSIF (Opcode = op_not) THEN 
               next_state <= L_Not;
            ELSIF (Opcode = op_and) THEN 
               next_state <= DecodeAND;
            ELSIF (Opcode = op_add) THEN 
               next_state <= DecodeADD;
            ELSIF (Opcode = op_jmp) THEN 
               next_state <= JMP;
            ELSIF (Opcode = op_lea) THEN 
               next_state <= LEA;
            ELSIF (Opcode = op_jsr) THEN 
               next_state <= DecodeJSR;
            ELSIF (Opcode = op_shf) THEN 
               next_state <= DecodeSHF;
            ELSIF ((Opcode = op_ldi) OR 
                   (OpCode = op_sti)) THEN 
               next_state <= CalcAddrI;
            ELSIF (Opcode = op_trap) THEN 
               next_state <= TRAP0;
            ELSIF ((Opcode = op_stb) OR
                   (Opcode = op_ldb)) THEN 
               next_state <= CalcAddrB;
            ELSE
               next_state <= IF1;
            END IF;
         WHEN BR2 => 
            next_state <= IF1;
         WHEN BR1 => 
            IF (( (n AND CheckN) OR
                   (p and CheckP) OR
                   (z and CheckZ) ) = '1') THEN 
               next_state <= BR2;
            ELSE
               next_state <= IF1;
            END IF;
         WHEN L_Not => 
            next_state <= IF1;
         WHEN IF1 => 
            next_state <= IF2;
         WHEN CalcADDR => 
            IF (Opcode = op_str) THEN 
               next_state <= ST1;
            ELSIF (Opcode = op_ldr) THEN 
               next_state <= LD1;
            ELSE
               next_state <= CalcADDR;
            END IF;
         WHEN IF2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF3;
            ELSE
               next_state <= IF2;
            END IF;
         WHEN IF3 => 
            next_state <= Decode;
         WHEN ST1 => 
            next_state <= ST2;
         WHEN LD1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LD2;
            ELSE
               next_state <= LD1;
            END IF;
         WHEN ST2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= ST2;
            END IF;
         WHEN LD2 => 
            next_state <= IF1;
         WHEN ADDReg => 
            next_state <= IF1;
         WHEN DecodeADD => 
            IF (RipBit5out = '1') THEN 
               next_state <= ADDImm5;
            ELSIF (RipBit5out = '0') THEN 
               next_state <= ADDReg;
            ELSE
               next_state <= DecodeADD;
            END IF;
         WHEN ADDImm5 => 
            next_state <= IF1;
         WHEN ANDReg => 
            next_state <= IF1;
         WHEN DecodeAND => 
            IF (RipBit5out = '1') THEN 
               next_state <= ANDImm5;
            ELSIF (RipBit5out = '0') THEN 
               next_state <= ANDReg;
            ELSE
               next_state <= DecodeAND;
            END IF;
         WHEN ANDImm5 => 
            next_state <= IF1;
         WHEN JMP => 
            next_state <= IF1;
         WHEN LEA => 
            next_state <= IF1;
         WHEN DecodeJSR => 
            IF (RipBit11out = '0') THEN 
               next_state <= JSRR0;
            ELSIF (RipBit11out  = '1') THEN 
               next_state <= JSR0;
            ELSE
               next_state <= DecodeJSR;
            END IF;
         WHEN JSR0 => 
            next_state <= JSR1;
         WHEN JSRR0 => 
            next_state <= JSRR1;
         WHEN JSR1 => 
            next_state <= IF1;
         WHEN JSRR1 => 
            next_state <= IF1;
         WHEN DecodeSHF => 
            IF ((RipBit4out = '1') AND 
                (RipBit5out = '0')) THEN 
               next_state <= shfSRL;
            ELSIF (RipBit4out  = '0') THEN 
               next_state <= shfSLL;
            ELSIF ((RipBit4out = '1') AND 
                    (RipBit5out = '1')) THEN 
               next_state <= shfSRA;
            ELSE
               next_state <= DecodeSHF;
            END IF;
         WHEN shfSRL => 
            next_state <= IF1;
         WHEN shfSLL => 
            next_state <= IF1;
         WHEN shfSRA => 
            next_state <= IF1;
         WHEN CalcAddrI => 
            IF (Opcode = op_sti) THEN 
               next_state <= STI1;
            ELSIF (Opcode = op_ldi) THEN 
               next_state <= LDI1;
            ELSE
               next_state <= CalcAddrI;
            END IF;
         WHEN STI3 => 
            next_state <= STI4;
         WHEN LDI1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LDI2;
            ELSE
               next_state <= LDI1;
            END IF;
         WHEN STI2 => 
            next_state <= STI3;
         WHEN LDI2 => 
            next_state <= LDI3;
         WHEN STI4 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= STI4;
            END IF;
         WHEN LDI3 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LDI4;
            ELSE
               next_state <= LDI3;
            END IF;
         WHEN LDI4 => 
            next_state <= IF1;
         WHEN STI1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= STI2;
            ELSE
               next_state <= STI1;
            END IF;
         WHEN TRAP0 => 
            next_state <= TRAP1;
         WHEN TRAP1 => 
            next_state <= TRAP2;
         WHEN CalcAddrB => 
            IF (Opcode = op_stb) THEN 
               next_state <= STB0;
            ELSIF (Opcode = op_ldb) THEN 
               next_state <= LDB0;
            ELSE
               next_state <= CalcAddrB;
            END IF;
         WHEN LDB0 => 
            IF (RipRFABit0out = '1') THEN 
               next_state <= LDB2;
            ELSIF (RipRFABit0out = '0') THEN 
               next_state <= LDB1;
            ELSE
               next_state <= LDB0;
            END IF;
         WHEN STB0 => 
            IF (RipRFABit0out = '0') THEN 
               next_state <= STB1;
            ELSIF (RipRFABit0out = '1') THEN 
               next_state <= STB2;
            ELSE
               next_state <= STB0;
            END IF;
         WHEN STB1 => 
            next_state <= STB3;
         WHEN STB2 => 
            next_state <= STB4;
         WHEN STB3 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= STB3;
            END IF;
         WHEN STB4 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= STB4;
            END IF;
         WHEN LDB1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LDB3;
            ELSE
               next_state <= LDB1;
            END IF;
         WHEN LDB2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LDB4;
            ELSE
               next_state <= LDB2;
            END IF;
         WHEN LDB3 => 
            next_state <= IF1;
         WHEN LDB4 => 
            next_state <= IF1;
         WHEN TRAP2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= TRAP3;
            ELSE
               next_state <= TRAP2;
            END IF;
         WHEN TRAP3 => 
            next_state <= IF1;
         WHEN OTHERS =>
            next_state <= Reset;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      ADJ45MuxSel <= '0';
      ADJ56MuxSel <= '0';
      ADJ8ByteMuxSel <= '0';
      ALUMuxSel <= '0';
      ALUop <= "000";
      BRaddPCMuxSel <= '0';
      BraddRFAMuxSel <= '0';
      ClrLHMuxSel <= '0';
      JSRMDRMuxSel <= '0';
      JSRRFAMuxSel <= '0';
      LoadIR <= '0';
      LoadMAR <= '0';
      LoadMDR <= '0';
      LoadNZP <= '0';
      LoadPC <= '0';
      MARMuxSel <= '0';
      MDRMuxSel <= '0';
      MREAD_L <= '1';
      MWRITEH_L <= '1';
      MWRITEL_L <= '1';
      MdrMarMuxSel <= '0';
      PCMuxSel <= '0';
      PCRegMuxSel <= '0';
      RFALowByteMuxSel <= '0';
      RFClrMuxSel <= '0';
      RFMuxSel <= '0';
      RegWrite <= '0';
      StoreSR <= '1';
      destR7Muxsel <= '0';
      offset64MuxSel <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN BR2 => 
            PCMuxSel <= '1';
            LoadPC <= '1';
         WHEN L_Not => 
            ALUop <= alu_not;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= '1';
         WHEN IF1 => 
            LoadMAR <= '1';
            LoadPC <= '1';
         WHEN CalcADDR => 
            ALUMuxSel <= '1';
            ALUop <= alu_add;
            MarMuxSel <= '1';
            LoadMAR <= '1';
         WHEN IF2 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6 ns;
         WHEN IF3 => 
            LoadIR <= '1';
         WHEN ST1 => 
            StoreSR <= '0';
            ALUop <= alu_pass;
            LoadMDR <= '1';
            MDRMuxSel <= '1';
         WHEN LD1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN ST2 => 
            MWRITEL_L <= '0' after 6ns;
            MWRITEH_L <= '0' after 6ns;
         WHEN LD2 => 
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN ADDReg => 
            ALUop <= alu_add;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= '1';
         WHEN ADDImm5 => 
            ADJ56MuxSel <= '1';
            ALUMuxSel <= '1';
            ALUop <= alu_add;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= '1';
         WHEN ANDReg => 
            ALUop <= alu_and;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= '1';
         WHEN ANDImm5 => 
            ADJ56MuxSel  <= '1';
            ALUMuxSel  <= '1';
            ALUop <= alu_and;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= '1';
         WHEN JMP => 
            StoreSR <= '1';
            PCRegMuxSel <= '1';
            LoadPC <= '1';
         WHEN LEA => 
            BraddRFAMuxSel <= '1';
            ALUop <= alu_pass;
            RFMuxSel <= '1';
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN JSR0 => 
            destR7MuxSel <= '1';
            BRaddPCMuxSel <= '1';
            BRaddRFAMuxSel <= '1';
            ALUop <= alu_pass;
            RFMuxSel <= '1';
            RegWrite <= '1';
         WHEN JSRR0 => 
            destR7MuxSel <= '1';
            BRaddPCMuxSel  <= '1';
            BraddRFAMuxSel  <= '1';
            ALUop <= alu_pass;
            RFMuxSel <= '1';
            RegWrite <= '1';
         WHEN JSR1 => 
            JSRRFAMuxSel <= '1';
            PCRegMuxSel <= '1';
            LoadPC <= '1';
         WHEN JSRR1 => 
            PCRegMuxSel <= '1';
            LoadPC <= '1';
         WHEN shfSRL => 
            ADJ45MuxSel <= '1';
            ADJ56MuxSel <= '1';
            ALUMuxSel <= '1';
            ALUop <= alu_srl;
            RFMuxSel <= '1';
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN shfSLL => 
            ADJ45MuxSel <= '1';
            ADJ56MuxSel <= '1';
            ALUMuxSel <= '1';
            ALUop <= alu_sll;
            RFMuxSel <= '1';
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN shfSRA => 
            ADJ45MuxSel <= '1';
            ADJ56MuxSel <= '1';
            ALUMuxSel <= '1';
            ALUop <= alu_sra; 
            RFMuxSel <= '1';
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN CalcAddrI => 
            ALUMuxSel <= '1';
            ALUop <= alu_add;
            MARMuxSel <= '1';
            LoadMar <= '1';
         WHEN STI3 => 
            StoreSR <= '0';
            ALUop <= alu_pass;
            LoadMDR <= '1';
            MDRMuxSel <= '1';
         WHEN LDI1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN STI2 => 
            MdrMarMuxSel <= '1';
            MARMuxSel <= '1';
            LoadMar <= '1';
         WHEN LDI2 => 
            MdrMarMuxSel <= '1';
            MARMuxSel <= '1';
            LoadMar <= '1';
         WHEN STI4 => 
            MWRITEL_L <= '0' after 6ns;
            MWRITEH_L <= '0' after 6ns;
         WHEN LDI3 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN LDI4 => 
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN STI1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN TRAP0 => 
            BraddPCMuxSel <= '1';
            BraddRFAMuxSel <= '1';
            destR7Muxsel <= '1';
            ALUop <= alu_pass;
            RFMuxSel <= '1';
            RegWrite <= '1';
         WHEN TRAP1 => 
            ADJ8ByteMuxSel <= '1';
            JSRRFAMuxSel <= '1';
            PCRegMuxSel <= '1';
            LoadPC <= '1';
            ALUop <= alu_pass;
            MARMuxSel <= '1';
            LoadMar <= '1';
         WHEN LDB0 => 
            offset64MuxSel <= '1';
            ADJ45MuxSel <= '1';
            ADJ56MuxSel <= '1';
            ALUMuxSel <= '1';
            ALUOp <= alu_add;
            MARMuxSel <= '1';
            LoadMar <= '1';
         WHEN STB0 => 
            offset64MuxSel <= '1';
            ADJ45MuxSel <= '1';
            ADJ56MuxSel <= '1';
            ALUMuxSel <= '1';
            ALUOp <= alu_add;
            MARMuxSel <= '1';
            LoadMar <= '1';
         WHEN STB1 => 
            StoreSR <= '0';
            ALUop <= alu_pass;
            MDRMuxSel <= '1';
            LoadMDR <= '1';
         WHEN STB2 => 
            StoreSR <= '0';
            ALUop <= alu_pass;
            RFALowByteMuxSel <= '1';
            MDRMuxSel <= '1';
            LoadMDR <= '1';
         WHEN STB3 => 
            MWRITEL_L <= '0' after 6ns;
         WHEN STB4 => 
            MWRITEH_L <= '0' after 6ns;
         WHEN LDB1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN LDB2 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN LDB3 => 
            ClrLHMuxSel <= '1';
            RFClrMuxSel <= '1';
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN LDB4 => 
            RFClrMuxSel <= '1';
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN TRAP2 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN TRAP3 => 
            JSRMDRMuxSel <= '1';
            JSRRFAMuxSel <= '1';
            PCRegMuxSel <= '1';
            LoadPC <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
