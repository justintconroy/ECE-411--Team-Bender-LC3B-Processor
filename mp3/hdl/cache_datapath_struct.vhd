-- VHDL Entity ece411.Cache_Datapath.interface
--
-- Created:
--          by - hwoods2.stdt (eelnx34.ews.illinois.edu)
--          at - 15:15:09 10/08/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Cache_Datapath IS
   PORT( 
      Address    : IN     LC3b_word;
      DATAOUT    : IN     LC3b_word;
      In_ld      : IN     std_logic;
      MREAD_L    : IN     std_logic;
      MWRITEH_L  : IN     std_logic;
      MWRITEL_L  : IN     std_logic;
      RESET_L    : IN     std_logic;
      clk        : IN     std_logic;
      in_idlehit : IN     std_logic;
      in_wb      : IN     std_logic;
      pmdatain   : IN     LC3b_oword;
      DATAIN     : OUT    LC3b_word;
      Dirty      : OUT    std_logic;
      MRESP_H    : OUT    std_logic;
      Miss       : OUT    std_logic;
      PMdataout  : OUT    LC3b_oword;
      pmaddress  : OUT    LC3b_word
   );

-- Declarations

END Cache_Datapath ;

--
-- VHDL Architecture ece411.Cache_Datapath.struct
--
-- Created:
--          by - hwoods2.stdt (eelnx34.ews.illinois.edu)
--          at - 15:15:09 10/08/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;

ARCHITECTURE struct OF Cache_Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL Accessout      : std_logic;
   SIGNAL DirtyIn1       : std_logic;
   SIGNAL DirtyOut0      : std_logic;
   SIGNAL DirtyOut1      : std_logic;
   SIGNAL Dirtyin0       : std_logic;
   SIGNAL Hit            : std_logic;
   SIGNAL Index          : LC3b_index;
   SIGNAL LRUout         : std_logic;
   SIGNAL Tag            : LC3B_tag;
   SIGNAL TagCompare0out : std_logic;
   SIGNAL TagCompare1out : std_logic;
   SIGNAL TagOut0        : LC3b_tag;
   SIGNAL TagOut1        : LC3b_tag;
   SIGNAL ValidOut0      : std_logic;
   SIGNAL ValidOut1      : std_logic;
   SIGNAL WayDatain      : LC3b_oword;
   SIGNAL WdataMuxout    : LC3b_oword;
   SIGNAL WriteAccess    : std_logic;
   SIGNAL aWriteCombout  : LC3b_oword;
   SIGNAL dclkout        : std_logic;
   SIGNAL evictTag       : LC3B_tag;
   SIGNAL hitgate        : std_logic;
   SIGNAL notLRUoutt     : std_logic;
   SIGNAL notProtohit    : std_logic;
   SIGNAL offset4        : LC3b_offset4;
   SIGNAL prehit0        : std_logic;
   SIGNAL prehit1        : std_logic;
   SIGNAL protohit       : std_logic;
   SIGNAL rip3Offsetout  : LC3B_INDEX;
   SIGNAL w0datawrite    : std_logic;
   SIGNAL w0datawriteR   : std_logic;
   SIGNAL w0datawriteW   : std_logic;
   SIGNAL w1datawrite    : std_logic;
   SIGNAL w1datawriteR   : std_logic;
   SIGNAL w1datawriteW   : std_logic;
   SIGNAL wADDRESS       : LC3b_word;
   SIGNAL wDataout0      : LC3b_oword;
   SIGNAL wDataout1      : LC3b_oword;


   -- Component Declarations
   COMPONENT ADDRSplitter
   PORT (
      Address : IN     LC3b_word ;
      Tag     : OUT    LC3B_tag ;
      Index   : OUT    LC3b_index ;
      offset4 : OUT    LC3b_offset4 
   );
   END COMPONENT;
   COMPONENT ADDRcomb
   PORT (
      evictTag : IN     LC3B_tag ;
      Index    : IN     LC3b_index ;
      wADDRESS : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT And2in
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT And3in
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      C : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT And4in
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      C : IN     std_logic ;
      D : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT LRU
   PORT (
      RESET_L : IN     std_logic ;
      Index   : IN     LC3b_index ;
      LRUout  : OUT    std_logic ;
      Hit     : IN     std_logic ;
      prehit1 : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT Mux2
   PORT (
      A   : IN     std_logic ;
      B   : IN     std_logic ;
      Sel : IN     std_logic ;
      F   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Nand3in
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      C : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT NotGate
   PORT (
      A : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT OneNSDelay
   PORT (
      A : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Or2in
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT TagCompare
   PORT (
      A : IN     LC3B_tag ;
      B : IN     LC3B_tag ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT TagMux2
   PORT (
      A   : IN     LC3b_tag ;
      B   : IN     LC3b_tag ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_tag 
   );
   END COMPONENT;
   COMPONENT Way
   PORT (
      RESET_L   : IN     std_logic ;
      DataWrite : IN     std_logic ;
      Index     : IN     LC3b_index ;
      DataIn    : IN     LC3b_oword ;
      TagIN     : IN     LC3b_tag ;
      DirtyIn   : IN     std_logic ;
      DataOut   : OUT    LC3b_oword ;
      TagOut    : OUT    LC3b_tag ;
      DirtyOut  : OUT    std_logic ;
      ValidOut  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WriteComb
   PORT (
      DATAOUT       : IN     LC3b_word ;
      MWRITEH_L     : IN     std_logic ;
      MWRITEL_L     : IN     std_logic ;
      WdataMuxout   : IN     LC3b_oword ;
      rip3Offsetout : IN     LC3B_INDEX ;
      aWriteCombout : OUT    LC3b_oword 
   );
   END COMPONENT;
   COMPONENT dclk
   PORT (
      clk     : IN     std_logic ;
      dclkout : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT hitgatemaker
   PORT (
      clk     : IN     std_logic ;
      dclkout : IN     std_logic ;
      hitgate : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT nand2in
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT oWordMux2
   PORT (
      A   : IN     LC3b_oword ;
      B   : IN     LC3b_oword ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_oword 
   );
   END COMPONENT;
   COMPONENT oWordMux8
   PORT (
      A   : IN     LC3b_oword ;
      Sel : IN     LC3b_8mux_sel ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT rip3Offset
   PORT (
      rip3Offsetout : OUT    LC3B_INDEX ;
      offset4       : IN     LC3b_offset4 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADDRSplitter USE ENTITY ece411.ADDRSplitter;
   FOR ALL : ADDRcomb USE ENTITY ece411.ADDRcomb;
   FOR ALL : And2in USE ENTITY ece411.And2in;
   FOR ALL : And3in USE ENTITY ece411.And3in;
   FOR ALL : And4in USE ENTITY ece411.And4in;
   FOR ALL : LRU USE ENTITY ece411.LRU;
   FOR ALL : Mux2 USE ENTITY ece411.Mux2;
   FOR ALL : Nand3in USE ENTITY ece411.Nand3in;
   FOR ALL : NotGate USE ENTITY ece411.NotGate;
   FOR ALL : OneNSDelay USE ENTITY ece411.OneNSDelay;
   FOR ALL : Or2in USE ENTITY ece411.Or2in;
   FOR ALL : TagCompare USE ENTITY ece411.TagCompare;
   FOR ALL : TagMux2 USE ENTITY ece411.TagMux2;
   FOR ALL : Way USE ENTITY ece411.Way;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : WriteComb USE ENTITY ece411.WriteComb;
   FOR ALL : dclk USE ENTITY ece411.dclk;
   FOR ALL : hitgatemaker USE ENTITY ece411.hitgatemaker;
   FOR ALL : nand2in USE ENTITY ece411.nand2in;
   FOR ALL : oWordMux2 USE ENTITY ece411.oWordMux2;
   FOR ALL : oWordMux8 USE ENTITY ece411.oWordMux8;
   FOR ALL : rip3Offset USE ENTITY ece411.rip3Offset;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- eb1 1     
   MRESP_H <= Hit;                                   


   -- Instance port mappings.
   aADDRSplitter : ADDRSplitter
      PORT MAP (
         Address => Address,
         Tag     => Tag,
         Index   => Index,
         offset4 => offset4
      );
   aADDRcomb : ADDRcomb
      PORT MAP (
         evictTag => evictTag,
         Index    => Index,
         wADDRESS => wADDRESS
      );
   U_7 : And2in
      PORT MAP (
         A => notLRUoutt,
         B => In_ld,
         F => w1datawriteR
      );
   U_8 : And2in
      PORT MAP (
         A => LRUout,
         B => In_ld,
         F => w0datawriteR
      );
   way0and : And2in
      PORT MAP (
         A => TagCompare0out,
         B => ValidOut0,
         F => prehit0
      );
   way1and : And2in
      PORT MAP (
         A => TagCompare1out,
         B => ValidOut1,
         F => prehit1
      );
   U_4 : And3in
      PORT MAP (
         A => notProtohit,
         B => in_idlehit,
         C => Accessout,
         F => Miss
      );
   U_10 : And3in
      PORT MAP (
         A => in_idlehit,
         B => prehit0,
         C => WriteAccess,
         F => w0datawriteW
      );
   U_14 : And3in
      PORT MAP (
         A => in_idlehit,
         B => prehit1,
         C => WriteAccess,
         F => w1datawriteW
      );
   U_0 : And4in
      PORT MAP (
         A => protohit,
         B => Accessout,
         C => in_idlehit,
         D => hitgate,
         F => Hit
      );
   aLRU : LRU
      PORT MAP (
         RESET_L => RESET_L,
         Index   => Index,
         LRUout  => LRUout,
         Hit     => Hit,
         prehit1 => prehit1
      );
   DirtyMux : Mux2
      PORT MAP (
         A   => DirtyOut1,
         B   => DirtyOut0,
         Sel => LRUout,
         F   => Dirty
      );
   aNand3in : Nand3in
      PORT MAP (
         A => MREAD_L,
         B => MWRITEH_L,
         C => MWRITEL_L,
         F => Accessout
      );
   U_5 : NotGate
      PORT MAP (
         A => protohit,
         F => notProtohit
      );
   U_9 : NotGate
      PORT MAP (
         A => LRUout,
         F => notLRUoutt
      );
   U_15 : OneNSDelay
      PORT MAP (
         A => w0datawriteW,
         F => Dirtyin0
      );
   U_16 : OneNSDelay
      PORT MAP (
         A => w1datawriteW,
         F => DirtyIn1
      );
   U_1 : Or2in
      PORT MAP (
         A => prehit1,
         B => prehit0,
         F => protohit
      );
   U_12 : Or2in
      PORT MAP (
         A => w1datawriteR,
         B => w1datawriteW,
         F => w1datawrite
      );
   U_13 : Or2in
      PORT MAP (
         A => w0datawriteR,
         B => w0datawriteW,
         F => w0datawrite
      );
   TagCompare0 : TagCompare
      PORT MAP (
         A => TagOut0,
         B => Tag,
         F => TagCompare0out
      );
   TagCompare1 : TagCompare
      PORT MAP (
         A => TagOut1,
         B => Tag,
         F => TagCompare1out
      );
   evicttagMux : TagMux2
      PORT MAP (
         A   => TagOut1,
         B   => TagOut0,
         Sel => LRUout,
         F   => evictTag
      );
   Way0 : Way
      PORT MAP (
         RESET_L   => RESET_L,
         DataWrite => w0datawrite,
         Index     => Index,
         DataIn    => WayDatain,
         TagIN     => Tag,
         DirtyIn   => Dirtyin0,
         DataOut   => wDataout0,
         TagOut    => TagOut0,
         DirtyOut  => DirtyOut0,
         ValidOut  => ValidOut0
      );
   Way1 : Way
      PORT MAP (
         RESET_L   => RESET_L,
         DataWrite => w1datawrite,
         Index     => Index,
         DataIn    => WayDatain,
         TagIN     => Tag,
         DirtyIn   => DirtyIn1,
         DataOut   => wDataout1,
         TagOut    => TagOut1,
         DirtyOut  => DirtyOut1,
         ValidOut  => ValidOut1
      );
   U_3 : WordMux2
      PORT MAP (
         A   => Address,
         B   => wADDRESS,
         Sel => in_wb,
         F   => pmaddress
      );
   aWriteComb : WriteComb
      PORT MAP (
         DATAOUT       => DATAOUT,
         MWRITEH_L     => MWRITEH_L,
         MWRITEL_L     => MWRITEL_L,
         WdataMuxout   => WdataMuxout,
         rip3Offsetout => rip3Offsetout,
         aWriteCombout => aWriteCombout
      );
   adclk : dclk
      PORT MAP (
         clk     => clk,
         dclkout => dclkout
      );
   ahitgatemaker : hitgatemaker
      PORT MAP (
         clk     => clk,
         dclkout => dclkout,
         hitgate => hitgate
      );
   U_11 : nand2in
      PORT MAP (
         A => MWRITEL_L,
         B => MWRITEH_L,
         F => WriteAccess
      );
   DatainMux : oWordMux2
      PORT MAP (
         A   => aWriteCombout,
         B   => pmdatain,
         Sel => In_ld,
         F   => WayDatain
      );
   WdataMux : oWordMux2
      PORT MAP (
         A   => wDataout0,
         B   => wDataout1,
         Sel => prehit1,
         F   => WdataMuxout
      );
   pmdataMux : oWordMux2
      PORT MAP (
         A   => wDataout1,
         B   => wDataout0,
         Sel => LRUout,
         F   => PMdataout
      );
   DatainxMux : oWordMux8
      PORT MAP (
         A   => WdataMuxout,
         Sel => rip3Offsetout,
         F   => DATAIN
      );
   arip3offset : rip3Offset
      PORT MAP (
         rip3Offsetout => rip3Offsetout,
         offset4       => offset4
      );

END struct;
